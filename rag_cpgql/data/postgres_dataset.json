[
  {
    "question": "List all source files under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show all header files in 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find the names of all functions prefaced with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify all functions in the 'access' module.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all type declarations in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").typeDecl.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate comments containing 'TODO'.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all functions in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get all literal values in the codebase.",
    "answer": "cpg.literal.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all local variables in 'src/backend/utils/cache'.",
    "answer": "cpg.file.name(\"src/backend/utils/cache/.*\").local.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show all control structures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").controlStructure.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all source files under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify all header files in 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve the names of all functions prefaced with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate all functions in the 'access' module.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all type declarations in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").typeDecl.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get comments containing 'TODO'.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all functions in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show all literal values in the codebase.",
    "answer": "cpg.literal.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all local variables in 'src/backend/utils/cache'.",
    "answer": "cpg.file.name(\"src/backend/utils/cache/.*\").local.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify all control structures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").controlStructure.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all source files under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate all header files in 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display the names of all functions prefaced with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get all functions in the 'access' module.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all type declarations in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").typeDecl.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show comments containing 'TODO'.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all functions in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify all literal values in the codebase.",
    "answer": "cpg.literal.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all local variables in 'src/backend/utils/cache'.",
    "answer": "cpg.file.name(\"src/backend/utils/cache/.*\").local.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate all control structures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").controlStructure.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all source files under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get all header files in 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List the names of all functions prefaced with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show all functions in the 'access' module.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all type declarations in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").typeDecl.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify comments containing 'TODO'.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all functions in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate all literal values in the codebase.",
    "answer": "cpg.literal.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all local variables in 'src/backend/utils/cache'.",
    "answer": "cpg.file.name(\"src/backend/utils/cache/.*\").local.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get all control structures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").controlStructure.code.l",
    "scenario": 1,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List the number of functions per directory under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show files with more than 20 functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with more than three parameters in 'src/backend/access/hash'.",
    "answer": "cpg.file.name(\"src/backend/access/hash/.*\").method.filter(_.parameter.size > 3).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions that call 'palloc' in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").method.where(_.call.name(\"palloc\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions starting with 'index_' in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.name(\"^index_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate number of functions for each module in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions defined in header files 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get type declarations and number of methods in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions referencing 'LWLock' in 'src/backend/storage/lmgr'.",
    "answer": "cpg.file.name(\"src/backend/storage/lmgr/.*\").method.where(_.identifier.name(\"LWLock\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show the number of functions per directory under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find files with more than 20 functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with more than three parameters in 'src/backend/access/hash'.",
    "answer": "cpg.file.name(\"src/backend/access/hash/.*\").method.filter(_.parameter.size > 3).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions that call 'palloc' in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").method.where(_.call.name(\"palloc\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions starting with 'index_' in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.name(\"^index_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display number of functions for each module in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions defined in header files 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List type declarations and number of methods in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions referencing 'LWLock' in 'src/backend/storage/lmgr'.",
    "answer": "cpg.file.name(\"src/backend/storage/lmgr/.*\").method.where(_.identifier.name(\"LWLock\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find the number of functions per directory under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify files with more than 20 functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with more than three parameters in 'src/backend/access/hash'.",
    "answer": "cpg.file.name(\"src/backend/access/hash/.*\").method.filter(_.parameter.size > 3).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that call 'palloc' in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").method.where(_.call.name(\"palloc\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions starting with 'index_' in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.name(\"^index_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get number of functions for each module in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions defined in header files 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show type declarations and number of methods in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions referencing 'LWLock' in 'src/backend/storage/lmgr'.",
    "answer": "cpg.file.name(\"src/backend/storage/lmgr/.*\").method.where(_.identifier.name(\"LWLock\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify the number of functions per directory under 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve files with more than 20 functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with more than three parameters in 'src/backend/access/hash'.",
    "answer": "cpg.file.name(\"src/backend/access/hash/.*\").method.filter(_.parameter.size > 3).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that call 'palloc' in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").method.where(_.call.name(\"palloc\").nonEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions starting with 'index_' in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.name(\"^index_.*\").l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List number of functions for each module in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").map(f => (f.name, f.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions defined in header files 'src/include/utils'.",
    "answer": "cpg.file.name(\"src/include/utils/.*\\.h\").method.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find type declarations and number of methods in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 1,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions defined but never called.",
    "answer": "cpg.method.where(_.caller.l.isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show the call chain starting from 'StartTransactionCommand'.",
    "answer": "cpg.method.name(\"StartTransactionCommand\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions calling 'palloc' without a corresponding 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions that call functions defined in different modules.",
    "answer": "cpg.method.where(_.call.callee.file.name.not(_ == _.file.name)).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions reachable from 'XLogInsert'.",
    "answer": "cpg.method.name(\"XLogInsert\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions defined but never called.",
    "answer": "cpg.method.where(_.caller.l.isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display the call chain starting from 'StartTransactionCommand'.",
    "answer": "cpg.method.name(\"StartTransactionCommand\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions calling 'palloc' without a corresponding 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions that call functions defined in different modules.",
    "answer": "cpg.method.where(_.call.callee.file.name.not(_ == _.file.name)).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions reachable from 'XLogInsert'.",
    "answer": "cpg.method.name(\"XLogInsert\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions defined but never called.",
    "answer": "cpg.method.where(_.caller.l.isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify the call chain starting from 'StartTransactionCommand'.",
    "answer": "cpg.method.name(\"StartTransactionCommand\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions calling 'palloc' without a corresponding 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions that call functions defined in different modules.",
    "answer": "cpg.method.where(_.call.callee.file.name.not(_ == _.file.name)).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions reachable from 'XLogInsert'.",
    "answer": "cpg.method.name(\"XLogInsert\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions defined but never called.",
    "answer": "cpg.method.where(_.caller.l.isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List the call chain starting from 'StartTransactionCommand'.",
    "answer": "cpg.method.name(\"StartTransactionCommand\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions calling 'palloc' without a corresponding 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions that call functions defined in different modules.",
    "answer": "cpg.method.where(_.call.callee.file.name.not(_ == _.file.name)).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions reachable from 'XLogInsert'.",
    "answer": "cpg.method.name(\"XLogInsert\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions defined but never called.",
    "answer": "cpg.method.where(_.caller.l.isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate the call chain starting from 'StartTransactionCommand'.",
    "answer": "cpg.method.name(\"StartTransactionCommand\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions calling 'palloc' without a corresponding 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions that call functions defined in different modules.",
    "answer": "cpg.method.where(_.call.callee.file.name.not(_ == _.file.name)).name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions reachable from 'XLogInsert'.",
    "answer": "cpg.method.name(\"XLogInsert\").repeat(_.callee).emit.name.l",
    "scenario": 1,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List calls to 'strcpy' or 'memcpy'.",
    "answer": "cpg.call.name(\"strcpy|memcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'sprintf'.",
    "answer": "cpg.call.name(\"sprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find uses of 'palloc'.",
    "answer": "cpg.call.name(\"palloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of 'malloc'.",
    "answer": "cpg.call.name(\"malloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'exec'.",
    "answer": "cpg.call.name(\"exec\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'system'.",
    "answer": "cpg.call.name(\"system\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'getenv'.",
    "answer": "cpg.call.name(\"getenv\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'PQgetvalue'.",
    "answer": "cpg.call.name(\"PQgetvalue\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of 'snprintf'.",
    "answer": "cpg.call.name(\"snprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'strcpy' or 'memcpy'.",
    "answer": "cpg.call.name(\"strcpy|memcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'sprintf'.",
    "answer": "cpg.call.name(\"sprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve uses of 'palloc'.",
    "answer": "cpg.call.name(\"palloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of 'malloc'.",
    "answer": "cpg.call.name(\"malloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'exec'.",
    "answer": "cpg.call.name(\"exec\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'system'.",
    "answer": "cpg.call.name(\"system\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'getenv'.",
    "answer": "cpg.call.name(\"getenv\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'PQgetvalue'.",
    "answer": "cpg.call.name(\"PQgetvalue\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of 'snprintf'.",
    "answer": "cpg.call.name(\"snprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'strcpy' or 'memcpy'.",
    "answer": "cpg.call.name(\"strcpy|memcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'sprintf'.",
    "answer": "cpg.call.name(\"sprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display uses of 'palloc'.",
    "answer": "cpg.call.name(\"palloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of 'malloc'.",
    "answer": "cpg.call.name(\"malloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'exec'.",
    "answer": "cpg.call.name(\"exec\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'system'.",
    "answer": "cpg.call.name(\"system\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'getenv'.",
    "answer": "cpg.call.name(\"getenv\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'PQgetvalue'.",
    "answer": "cpg.call.name(\"PQgetvalue\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of 'snprintf'.",
    "answer": "cpg.call.name(\"snprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'strcpy' or 'memcpy'.",
    "answer": "cpg.call.name(\"strcpy|memcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'sprintf'.",
    "answer": "cpg.call.name(\"sprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List uses of 'palloc'.",
    "answer": "cpg.call.name(\"palloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of 'malloc'.",
    "answer": "cpg.call.name(\"malloc\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'exec'.",
    "answer": "cpg.call.name(\"exec\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'system'.",
    "answer": "cpg.call.name(\"system\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'getenv'.",
    "answer": "cpg.call.name(\"getenv\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'PQgetvalue'.",
    "answer": "cpg.call.name(\"PQgetvalue\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of 'snprintf'.",
    "answer": "cpg.call.name(\"snprintf\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List data flows from 'pq_getmessage' to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions calling 'palloc' without error checks.",
    "answer": "cpg.call.name(\"palloc\").whereNot(_.inControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find calls to 'ereport' with severity PANIC.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions allocating memory but not freeing with 'pfree'.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve calls to 'strcpy' without length check.",
    "answer": "cpg.call.name(\"strcpy\").whereNot(_.astParent.isControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate uses of 'pg_strcpy'.",
    "answer": "cpg.call.name(\"pg_strcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display calls to 'system' tainted by 'CopyFrom'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"CopyFrom\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get uses of 'sprintf' to build dynamic SQL in 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"sprintf\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List calls to 'elog' with DEBUG severity.",
    "answer": "cpg.call.name(\"elog\").where(_.argument.code.contains(\"DEBUG\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show data flows from 'pq_getmessage' to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions calling 'palloc' without error checks.",
    "answer": "cpg.call.name(\"palloc\").whereNot(_.inControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify calls to 'ereport' with severity PANIC.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions allocating memory but not freeing with 'pfree'.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate calls to 'strcpy' without length check.",
    "answer": "cpg.call.name(\"strcpy\").whereNot(_.astParent.isControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display uses of 'pg_strcpy'.",
    "answer": "cpg.call.name(\"pg_strcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get calls to 'system' tainted by 'CopyFrom'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"CopyFrom\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List uses of 'sprintf' to build dynamic SQL in 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"sprintf\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show calls to 'elog' with DEBUG severity.",
    "answer": "cpg.call.name(\"elog\").where(_.argument.code.contains(\"DEBUG\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find data flows from 'pq_getmessage' to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions calling 'palloc' without error checks.",
    "answer": "cpg.call.name(\"palloc\").whereNot(_.inControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve calls to 'ereport' with severity PANIC.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions allocating memory but not freeing with 'pfree'.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display calls to 'strcpy' without length check.",
    "answer": "cpg.call.name(\"strcpy\").whereNot(_.astParent.isControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get uses of 'pg_strcpy'.",
    "answer": "cpg.call.name(\"pg_strcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List calls to 'system' tainted by 'CopyFrom'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"CopyFrom\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show uses of 'sprintf' to build dynamic SQL in 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"sprintf\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find calls to 'elog' with DEBUG severity.",
    "answer": "cpg.call.name(\"elog\").where(_.argument.code.contains(\"DEBUG\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify data flows from 'pq_getmessage' to 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions calling 'palloc' without error checks.",
    "answer": "cpg.call.name(\"palloc\").whereNot(_.inControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate calls to 'ereport' with severity PANIC.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions allocating memory but not freeing with 'pfree'.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get calls to 'strcpy' without length check.",
    "answer": "cpg.call.name(\"strcpy\").whereNot(_.astParent.isControlStructure).code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List uses of 'pg_strcpy'.",
    "answer": "cpg.call.name(\"pg_strcpy\").code.l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show calls to 'system' tainted by 'CopyFrom'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"CopyFrom\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find uses of 'sprintf' to build dynamic SQL in 'SPI_execute'.",
    "answer": "cpg.call.name(\"SPI_execute\").where(_.argument.reachableBy(cpg.call.name(\"sprintf\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List tainted flows from 'pq_getmessage' to 'system'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show data flows from 'PQgetvalue' to 'ereport'.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.reachableBy(cpg.call.name(\"PQgetvalue\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find memory leaks due to 'palloc' without 'pfree' along a call chain.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.reachableByFlows(cpg.call.name(\"pfree\"))).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify calls to 'strncpy' using untrusted input.",
    "answer": "cpg.call.name(\"strncpy\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve flows from configuration reads to 'system' calls.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"SetConfigOption\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate tainted flows from 'pq_getmessage' to 'system'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display data flows from 'PQgetvalue' to 'ereport'.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.reachableBy(cpg.call.name(\"PQgetvalue\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get memory leaks due to 'palloc' without 'pfree' along a call chain.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.reachableByFlows(cpg.call.name(\"pfree\"))).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List calls to 'strncpy' using untrusted input.",
    "answer": "cpg.call.name(\"strncpy\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show flows from configuration reads to 'system' calls.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"SetConfigOption\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find tainted flows from 'pq_getmessage' to 'system'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify data flows from 'PQgetvalue' to 'ereport'.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.reachableBy(cpg.call.name(\"PQgetvalue\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve memory leaks due to 'palloc' without 'pfree' along a call chain.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.reachableByFlows(cpg.call.name(\"pfree\"))).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate calls to 'strncpy' using untrusted input.",
    "answer": "cpg.call.name(\"strncpy\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display flows from configuration reads to 'system' calls.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"SetConfigOption\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get tainted flows from 'pq_getmessage' to 'system'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List data flows from 'PQgetvalue' to 'ereport'.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.reachableBy(cpg.call.name(\"PQgetvalue\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show memory leaks due to 'palloc' without 'pfree' along a call chain.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.reachableByFlows(cpg.call.name(\"pfree\"))).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find calls to 'strncpy' using untrusted input.",
    "answer": "cpg.call.name(\"strncpy\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify flows from configuration reads to 'system' calls.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"SetConfigOption\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve tainted flows from 'pq_getmessage' to 'system'.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate data flows from 'PQgetvalue' to 'ereport'.",
    "answer": "cpg.call.name(\"ereport\").where(_.argument.reachableBy(cpg.call.name(\"PQgetvalue\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display memory leaks due to 'palloc' without 'pfree' along a call chain.",
    "answer": "cpg.call.name(\"palloc\").method.whereNot(_.reachableByFlows(cpg.call.name(\"pfree\"))).name.l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get calls to 'strncpy' using untrusted input.",
    "answer": "cpg.call.name(\"strncpy\").where(_.argument.reachableBy(cpg.call.name(\"pq_getmessage\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List flows from configuration reads to 'system' calls.",
    "answer": "cpg.call.name(\"system\").where(_.argument.reachableBy(cpg.call.name(\"SetConfigOption\").argument)).l",
    "scenario": 2,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List all function signatures in 'src/backend/access/heap'.",
    "answer": "cpg.file.name(\"src/backend/access/heap/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show names and return types of functions in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.map(m => (m.name, m.methodReturn.typeFullName)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all parameters of functions in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").method.parameter.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify comments associated with functions starting with 'XLog'.",
    "answer": "cpg.method.name(\"^XLog.*\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve TODO comments in the source.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate function signatures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display documentation comments in header files.",
    "answer": "cpg.file.name(\"src/include/.*\\.h\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get names of type declarations in 'src/include/nodes'.",
    "answer": "cpg.file.name(\"src/include/nodes/.*\").typeDecl.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all literal strings used in comments.",
    "answer": "cpg.comment.literal.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show number of parameters for 'heap_insert'.",
    "answer": "cpg.method.name(\"heap_insert\").parameter.size.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all function signatures in 'src/backend/access/heap'.",
    "answer": "cpg.file.name(\"src/backend/access/heap/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify names and return types of functions in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.map(m => (m.name, m.methodReturn.typeFullName)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all parameters of functions in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").method.parameter.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate comments associated with functions starting with 'XLog'.",
    "answer": "cpg.method.name(\"^XLog.*\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display TODO comments in the source.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get function signatures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List documentation comments in header files.",
    "answer": "cpg.file.name(\"src/include/.*\\.h\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show names of type declarations in 'src/include/nodes'.",
    "answer": "cpg.file.name(\"src/include/nodes/.*\").typeDecl.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all literal strings used in comments.",
    "answer": "cpg.comment.literal.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify number of parameters for 'heap_insert'.",
    "answer": "cpg.method.name(\"heap_insert\").parameter.size.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all function signatures in 'src/backend/access/heap'.",
    "answer": "cpg.file.name(\"src/backend/access/heap/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate names and return types of functions in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.map(m => (m.name, m.methodReturn.typeFullName)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all parameters of functions in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").method.parameter.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get comments associated with functions starting with 'XLog'.",
    "answer": "cpg.method.name(\"^XLog.*\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List TODO comments in the source.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show function signatures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find documentation comments in header files.",
    "answer": "cpg.file.name(\"src/include/.*\\.h\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify names of type declarations in 'src/include/nodes'.",
    "answer": "cpg.file.name(\"src/include/nodes/.*\").typeDecl.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all literal strings used in comments.",
    "answer": "cpg.comment.literal.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate number of parameters for 'heap_insert'.",
    "answer": "cpg.method.name(\"heap_insert\").parameter.size.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all function signatures in 'src/backend/access/heap'.",
    "answer": "cpg.file.name(\"src/backend/access/heap/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get names and return types of functions in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.map(m => (m.name, m.methodReturn.typeFullName)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all parameters of functions in 'src/include/storage'.",
    "answer": "cpg.file.name(\"src/include/storage/.*\").method.parameter.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show comments associated with functions starting with 'XLog'.",
    "answer": "cpg.method.name(\"^XLog.*\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find TODO comments in the source.",
    "answer": "cpg.comment.code(\".*TODO.*\").l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify function signatures in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.signature.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve documentation comments in header files.",
    "answer": "cpg.file.name(\"src/include/.*\\.h\").comment.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate names of type declarations in 'src/include/nodes'.",
    "answer": "cpg.file.name(\"src/include/nodes/.*\").typeDecl.name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all literal strings used in comments.",
    "answer": "cpg.comment.literal.code.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get number of parameters for 'heap_insert'.",
    "answer": "cpg.method.name(\"heap_insert\").parameter.size.l",
    "scenario": 3,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions missing documentation in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with their line counts in 'src/backend/storage/ipc'.",
    "answer": "cpg.file.name(\"src/backend/storage/ipc/.*\").method.map(m => (m.name, m.lineNumberEnd - m.lineNumberStart)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions in 'src/backend/tsearch' that do not call any other functions.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").method.where(_.callee.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve modules with the highest number of functions.",
    "answer": "cpg.file.map(f => (f.name, f.method.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with more than five parameters in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.parameter.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions and the number of literals they contain.",
    "answer": "cpg.method.map(m => (m.name, m.literal.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions lacking comments in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions missing documentation in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with their line counts in 'src/backend/storage/ipc'.",
    "answer": "cpg.file.name(\"src/backend/storage/ipc/.*\").method.map(m => (m.name, m.lineNumberEnd - m.lineNumberStart)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions in 'src/backend/tsearch' that do not call any other functions.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").method.where(_.callee.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate modules with the highest number of functions.",
    "answer": "cpg.file.map(f => (f.name, f.method.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with more than five parameters in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.parameter.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions and the number of literals they contain.",
    "answer": "cpg.method.map(m => (m.name, m.literal.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions lacking comments in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions missing documentation in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with their line counts in 'src/backend/storage/ipc'.",
    "answer": "cpg.file.name(\"src/backend/storage/ipc/.*\").method.map(m => (m.name, m.lineNumberEnd - m.lineNumberStart)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions in 'src/backend/tsearch' that do not call any other functions.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").method.where(_.callee.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display modules with the highest number of functions.",
    "answer": "cpg.file.map(f => (f.name, f.method.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions with more than five parameters in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.parameter.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions and the number of literals they contain.",
    "answer": "cpg.method.map(m => (m.name, m.literal.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions lacking comments in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions missing documentation in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with their line counts in 'src/backend/storage/ipc'.",
    "answer": "cpg.file.name(\"src/backend/storage/ipc/.*\").method.map(m => (m.name, m.lineNumberEnd - m.lineNumberStart)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions in 'src/backend/tsearch' that do not call any other functions.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").method.where(_.callee.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get modules with the highest number of functions.",
    "answer": "cpg.file.map(f => (f.name, f.method.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with more than five parameters in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.parameter.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions and the number of literals they contain.",
    "answer": "cpg.method.map(m => (m.name, m.literal.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions lacking comments in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.comment.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List the function call graph for 'src/backend/postmaster'.",
    "answer": "cpg.file.name(\"src/backend/postmaster/.*\").call.map(call => (call.method.name, call.callee.name)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show public API functions not referenced internally.",
    "answer": "cpg.method.isPublic.where(_.caller.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions with the deepest call chains in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.map(m => (m.name, m.callee.repeat(_.callee).emit.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions whose parameters are not mentioned in comments.",
    "answer": "cpg.method.where(m => m.parameter.name.exists(p => !m.comment.code.contains(p))).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions that both call and are called by many functions.",
    "answer": "cpg.method.where(m => m.callee.size > 5 && m.caller.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate the function call graph for 'src/backend/postmaster'.",
    "answer": "cpg.file.name(\"src/backend/postmaster/.*\").call.map(call => (call.method.name, call.callee.name)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display public API functions not referenced internally.",
    "answer": "cpg.method.isPublic.where(_.caller.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions with the deepest call chains in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.map(m => (m.name, m.callee.repeat(_.callee).emit.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions whose parameters are not mentioned in comments.",
    "answer": "cpg.method.where(m => m.parameter.name.exists(p => !m.comment.code.contains(p))).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions that both call and are called by many functions.",
    "answer": "cpg.method.where(m => m.callee.size > 5 && m.caller.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find the function call graph for 'src/backend/postmaster'.",
    "answer": "cpg.file.name(\"src/backend/postmaster/.*\").call.map(call => (call.method.name, call.callee.name)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify public API functions not referenced internally.",
    "answer": "cpg.method.isPublic.where(_.caller.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions with the deepest call chains in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.map(m => (m.name, m.callee.repeat(_.callee).emit.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions whose parameters are not mentioned in comments.",
    "answer": "cpg.method.where(m => m.parameter.name.exists(p => !m.comment.code.contains(p))).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions that both call and are called by many functions.",
    "answer": "cpg.method.where(m => m.callee.size > 5 && m.caller.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get the function call graph for 'src/backend/postmaster'.",
    "answer": "cpg.file.name(\"src/backend/postmaster/.*\").call.map(call => (call.method.name, call.callee.name)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List public API functions not referenced internally.",
    "answer": "cpg.method.isPublic.where(_.caller.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions with the deepest call chains in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.map(m => (m.name, m.callee.repeat(_.callee).emit.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions whose parameters are not mentioned in comments.",
    "answer": "cpg.method.where(m => m.parameter.name.exists(p => !m.comment.code.contains(p))).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions that both call and are called by many functions.",
    "answer": "cpg.method.where(m => m.callee.size > 5 && m.caller.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve the function call graph for 'src/backend/postmaster'.",
    "answer": "cpg.file.name(\"src/backend/postmaster/.*\").call.map(call => (call.method.name, call.callee.name)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate public API functions not referenced internally.",
    "answer": "cpg.method.isPublic.where(_.caller.isEmpty).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions with the deepest call chains in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.map(m => (m.name, m.callee.repeat(_.callee).emit.size)).l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions whose parameters are not mentioned in comments.",
    "answer": "cpg.method.where(m => m.parameter.name.exists(p => !m.comment.code.contains(p))).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions that both call and are called by many functions.",
    "answer": "cpg.method.where(m => m.callee.size > 5 && m.caller.size > 5).name.l",
    "scenario": 3,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List types related to 'WAL'.",
    "answer": "cpg.typeDecl.name(\".*WAL.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions interacting with the file system.",
    "answer": "cpg.call.name(\"ReadFile|WriteFile|FileRead|FileWrite\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find references to 'MemoryContext'.",
    "answer": "cpg.identifier.name(\"MemoryContext\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify methods in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve modules using libpq functions.",
    "answer": "cpg.call.name(\"^PQ\").file.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'XLogInsert'.",
    "answer": "cpg.call.name(\"XLogInsert\").code.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions starting with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions handling authentication in 'src/backend/libpq/auth.c'.",
    "answer": "cpg.file.name(\"src/backend/libpq/auth.c\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List occurrences of the 'TupleTableSlot' struct.",
    "answer": "cpg.typeDecl.name(\"TupleTableSlot\").referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of 'LWLock' functions.",
    "answer": "cpg.call.name(\"LWLockAcquire|LWLockRelease\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find types related to 'WAL'.",
    "answer": "cpg.typeDecl.name(\".*WAL.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions interacting with the file system.",
    "answer": "cpg.call.name(\"ReadFile|WriteFile|FileRead|FileWrite\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve references to 'MemoryContext'.",
    "answer": "cpg.identifier.name(\"MemoryContext\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate methods in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display modules using libpq functions.",
    "answer": "cpg.call.name(\"^PQ\").file.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'XLogInsert'.",
    "answer": "cpg.call.name(\"XLogInsert\").code.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions starting with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions handling authentication in 'src/backend/libpq/auth.c'.",
    "answer": "cpg.file.name(\"src/backend/libpq/auth.c\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find occurrences of the 'TupleTableSlot' struct.",
    "answer": "cpg.typeDecl.name(\"TupleTableSlot\").referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of 'LWLock' functions.",
    "answer": "cpg.call.name(\"LWLockAcquire|LWLockRelease\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve types related to 'WAL'.",
    "answer": "cpg.typeDecl.name(\".*WAL.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions interacting with the file system.",
    "answer": "cpg.call.name(\"ReadFile|WriteFile|FileRead|FileWrite\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display references to 'MemoryContext'.",
    "answer": "cpg.identifier.name(\"MemoryContext\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get methods in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List modules using libpq functions.",
    "answer": "cpg.call.name(\"^PQ\").file.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'XLogInsert'.",
    "answer": "cpg.call.name(\"XLogInsert\").code.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions starting with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions handling authentication in 'src/backend/libpq/auth.c'.",
    "answer": "cpg.file.name(\"src/backend/libpq/auth.c\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve occurrences of the 'TupleTableSlot' struct.",
    "answer": "cpg.typeDecl.name(\"TupleTableSlot\").referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of 'LWLock' functions.",
    "answer": "cpg.call.name(\"LWLockAcquire|LWLockRelease\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display types related to 'WAL'.",
    "answer": "cpg.typeDecl.name(\".*WAL.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions interacting with the file system.",
    "answer": "cpg.call.name(\"ReadFile|WriteFile|FileRead|FileWrite\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List references to 'MemoryContext'.",
    "answer": "cpg.identifier.name(\"MemoryContext\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show methods in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find modules using libpq functions.",
    "answer": "cpg.call.name(\"^PQ\").file.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'XLogInsert'.",
    "answer": "cpg.call.name(\"XLogInsert\").code.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions starting with 'heap_'.",
    "answer": "cpg.method.name(\"^heap_.*\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions handling authentication in 'src/backend/libpq/auth.c'.",
    "answer": "cpg.file.name(\"src/backend/libpq/auth.c\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display occurrences of the 'TupleTableSlot' struct.",
    "answer": "cpg.typeDecl.name(\"TupleTableSlot\").referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of 'LWLock' functions.",
    "answer": "cpg.call.name(\"LWLockAcquire|LWLockRelease\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'heap_insert' with missing arguments.",
    "answer": "cpg.call.name(\"heap_insert\").where(_.argument.size < _.callee.parameter.size).location.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions allocating memory without freeing it in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find references to configuration variables in the codebase.",
    "answer": "cpg.identifier.name(\"GUC\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions performing replication tasks in 'src/backend/replication'.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve usages of struct 'PgStat_Msg' across files.",
    "answer": "cpg.typeDecl.name(\"PgStat_Msg\").method.referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that allocate new memory contexts.",
    "answer": "cpg.call.name(\"AllocSetContextCreate|MemoryContextCreate\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display methods that open network sockets.",
    "answer": "cpg.call.name(\"pg_socket|socket\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods that register background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that parse SQL queries.",
    "answer": "cpg.call.name(\"pg_parse_query|parse_analyze\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show calls to 'heap_insert' with missing arguments.",
    "answer": "cpg.call.name(\"heap_insert\").where(_.argument.size < _.callee.parameter.size).location.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions allocating memory without freeing it in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify references to configuration variables in the codebase.",
    "answer": "cpg.identifier.name(\"GUC\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions performing replication tasks in 'src/backend/replication'.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate usages of struct 'PgStat_Msg' across files.",
    "answer": "cpg.typeDecl.name(\"PgStat_Msg\").method.referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that allocate new memory contexts.",
    "answer": "cpg.call.name(\"AllocSetContextCreate|MemoryContextCreate\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods that open network sockets.",
    "answer": "cpg.call.name(\"pg_socket|socket\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods that register background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that parse SQL queries.",
    "answer": "cpg.call.name(\"pg_parse_query|parse_analyze\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find calls to 'heap_insert' with missing arguments.",
    "answer": "cpg.call.name(\"heap_insert\").where(_.argument.size < _.callee.parameter.size).location.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions allocating memory without freeing it in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve references to configuration variables in the codebase.",
    "answer": "cpg.identifier.name(\"GUC\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions performing replication tasks in 'src/backend/replication'.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display usages of struct 'PgStat_Msg' across files.",
    "answer": "cpg.typeDecl.name(\"PgStat_Msg\").method.referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that allocate new memory contexts.",
    "answer": "cpg.call.name(\"AllocSetContextCreate|MemoryContextCreate\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods that open network sockets.",
    "answer": "cpg.call.name(\"pg_socket|socket\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods that register background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions that parse SQL queries.",
    "answer": "cpg.call.name(\"pg_parse_query|parse_analyze\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify calls to 'heap_insert' with missing arguments.",
    "answer": "cpg.call.name(\"heap_insert\").where(_.argument.size < _.callee.parameter.size).location.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions allocating memory without freeing it in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").call.name(\"palloc\").method.whereNot(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate references to configuration variables in the codebase.",
    "answer": "cpg.identifier.name(\"GUC\").l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions performing replication tasks in 'src/backend/replication'.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get usages of struct 'PgStat_Msg' across files.",
    "answer": "cpg.typeDecl.name(\"PgStat_Msg\").method.referencingMembers.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that allocate new memory contexts.",
    "answer": "cpg.call.name(\"AllocSetContextCreate|MemoryContextCreate\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods that open network sockets.",
    "answer": "cpg.call.name(\"pg_socket|socket\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods that register background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").method.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List data flows from parser output to executor functions.",
    "answer": "cpg.call.name(\"ExecEvalExpr\").where(_.argument.reachableBy(cpg.call.name(\"pg_parse_query|parse_analyze\").argument)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show propagation of 'XLogInsert' results through the call graph.",
    "answer": "cpg.call.name(\"XLogInsert\").caller.repeat(_.caller).emit.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find concurrency patterns using lightweight locks.",
    "answer": "cpg.call.name(\"LWLockAcquire\").callee.repeat(_.callee).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify cross-module interactions for the 'GUC' variable.",
    "answer": "cpg.identifier.name(\"GUC\").caller.callers.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve registration and invocation of background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").map(r => (r.argument(1), r.callee.caller.name)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate data flows from parser output to executor functions.",
    "answer": "cpg.call.name(\"ExecEvalExpr\").where(_.argument.reachableBy(cpg.call.name(\"pg_parse_query|parse_analyze\").argument)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display propagation of 'XLogInsert' results through the call graph.",
    "answer": "cpg.call.name(\"XLogInsert\").caller.repeat(_.caller).emit.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get concurrency patterns using lightweight locks.",
    "answer": "cpg.call.name(\"LWLockAcquire\").callee.repeat(_.callee).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List cross-module interactions for the 'GUC' variable.",
    "answer": "cpg.identifier.name(\"GUC\").caller.callers.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show registration and invocation of background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").map(r => (r.argument(1), r.callee.caller.name)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find data flows from parser output to executor functions.",
    "answer": "cpg.call.name(\"ExecEvalExpr\").where(_.argument.reachableBy(cpg.call.name(\"pg_parse_query|parse_analyze\").argument)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify propagation of 'XLogInsert' results through the call graph.",
    "answer": "cpg.call.name(\"XLogInsert\").caller.repeat(_.caller).emit.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve concurrency patterns using lightweight locks.",
    "answer": "cpg.call.name(\"LWLockAcquire\").callee.repeat(_.callee).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate cross-module interactions for the 'GUC' variable.",
    "answer": "cpg.identifier.name(\"GUC\").caller.callers.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display registration and invocation of background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").map(r => (r.argument(1), r.callee.caller.name)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get data flows from parser output to executor functions.",
    "answer": "cpg.call.name(\"ExecEvalExpr\").where(_.argument.reachableBy(cpg.call.name(\"pg_parse_query|parse_analyze\").argument)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List propagation of 'XLogInsert' results through the call graph.",
    "answer": "cpg.call.name(\"XLogInsert\").caller.repeat(_.caller).emit.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show concurrency patterns using lightweight locks.",
    "answer": "cpg.call.name(\"LWLockAcquire\").callee.repeat(_.callee).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find cross-module interactions for the 'GUC' variable.",
    "answer": "cpg.identifier.name(\"GUC\").caller.callers.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify registration and invocation of background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").map(r => (r.argument(1), r.callee.caller.name)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve data flows from parser output to executor functions.",
    "answer": "cpg.call.name(\"ExecEvalExpr\").where(_.argument.reachableBy(cpg.call.name(\"pg_parse_query|parse_analyze\").argument)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate propagation of 'XLogInsert' results through the call graph.",
    "answer": "cpg.call.name(\"XLogInsert\").caller.repeat(_.caller).emit.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display concurrency patterns using lightweight locks.",
    "answer": "cpg.call.name(\"LWLockAcquire\").callee.repeat(_.callee).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get cross-module interactions for the 'GUC' variable.",
    "answer": "cpg.identifier.name(\"GUC\").caller.callers.name.l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List registration and invocation of background workers.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").map(r => (r.argument(1), r.callee.caller.name)).l",
    "scenario": 4,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions longer than 200 lines in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.lineNumberEnd - _.lineNumberStart > 200).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show methods with more than eight parameters in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(_.parameter.size > 8).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find files with more than twenty functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify variables with names shorter than three characters.",
    "answer": "cpg.local.name(\"^\\w{1,2}$\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions containing nested if statements in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.controlStructure.where(_.astParent.isControlStructure).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display methods with no parameters in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.parameter.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions with many local variables in 'src/backend/tcop'.",
    "answer": "cpg.file.name(\"src/backend/tcop/.*\").method.where(_.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List files containing header guards in 'src/include'.",
    "answer": "cpg.file.name(\"src/include/.*\").comment.code(\".*#ifndef.*#define.*#endif.*\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show deeply nested control structures in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").controlStructure.where(_.astParent.astParent.isControlStructure).code.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions longer than 200 lines in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.lineNumberEnd - _.lineNumberStart > 200).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify methods with more than eight parameters in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(_.parameter.size > 8).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve files with more than twenty functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate variables with names shorter than three characters.",
    "answer": "cpg.local.name(\"^\\w{1,2}$\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions containing nested if statements in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.controlStructure.where(_.astParent.isControlStructure).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List methods with no parameters in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.parameter.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions with many local variables in 'src/backend/tcop'.",
    "answer": "cpg.file.name(\"src/backend/tcop/.*\").method.where(_.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find files containing header guards in 'src/include'.",
    "answer": "cpg.file.name(\"src/include/.*\").comment.code(\".*#ifndef.*#define.*#endif.*\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify deeply nested control structures in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").controlStructure.where(_.astParent.astParent.isControlStructure).code.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions longer than 200 lines in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.lineNumberEnd - _.lineNumberStart > 200).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate methods with more than eight parameters in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(_.parameter.size > 8).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display files with more than twenty functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get variables with names shorter than three characters.",
    "answer": "cpg.local.name(\"^\\w{1,2}$\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions containing nested if statements in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.controlStructure.where(_.astParent.isControlStructure).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find methods with no parameters in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.parameter.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions with many local variables in 'src/backend/tcop'.",
    "answer": "cpg.file.name(\"src/backend/tcop/.*\").method.where(_.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve files containing header guards in 'src/include'.",
    "answer": "cpg.file.name(\"src/include/.*\").comment.code(\".*#ifndef.*#define.*#endif.*\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate deeply nested control structures in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").controlStructure.where(_.astParent.astParent.isControlStructure).code.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions longer than 200 lines in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.lineNumberEnd - _.lineNumberStart > 200).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get methods with more than eight parameters in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(_.parameter.size > 8).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List files with more than twenty functions in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").where(_.method.size > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show variables with names shorter than three characters.",
    "answer": "cpg.local.name(\"^\\w{1,2}$\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions containing nested if statements in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.controlStructure.where(_.astParent.isControlStructure).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify duplicate function names across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve methods with no parameters in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.parameter.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions with many local variables in 'src/backend/tcop'.",
    "answer": "cpg.file.name(\"src/backend/tcop/.*\").method.where(_.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display files containing header guards in 'src/include'.",
    "answer": "cpg.file.name(\"src/include/.*\").comment.code(\".*#ifndef.*#define.*#endif.*\").l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get deeply nested control structures in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").controlStructure.where(_.astParent.astParent.isControlStructure).code.l",
    "scenario": 5,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List methods exceeding cyclomatic complexity of 20 in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.cyclomaticComplexity > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show mutually recursive functions in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(m => m.callee.name(m.name)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with unused local variables in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.where(_.local.where(l => l.reference.isEmpty).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify methods suitable for inlining in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.caller.size == 1 && _.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve modules with circular dependencies.",
    "answer": "cpg.method.where(_.callee.callee.contains(_.method)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with deep nesting levels in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.controlStructure.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display unused global variables in 'src/backend/utils/init'.",
    "answer": "cpg.file.name(\"src/backend/utils/init/.*\").member.where(_.reference.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions containing code clones.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions missing return statements.",
    "answer": "cpg.method.where(_.methodReturn.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods exceeding cyclomatic complexity of 20 in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.cyclomaticComplexity > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find mutually recursive functions in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(m => m.callee.name(m.name)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with unused local variables in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.where(_.local.where(l => l.reference.isEmpty).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve methods suitable for inlining in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.caller.size == 1 && _.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate modules with circular dependencies.",
    "answer": "cpg.method.where(_.callee.callee.contains(_.method)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with deep nesting levels in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.controlStructure.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get unused global variables in 'src/backend/utils/init'.",
    "answer": "cpg.file.name(\"src/backend/utils/init/.*\").member.where(_.reference.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions containing code clones.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions missing return statements.",
    "answer": "cpg.method.where(_.methodReturn.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods exceeding cyclomatic complexity of 20 in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.cyclomaticComplexity > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify mutually recursive functions in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(m => m.callee.name(m.name)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with unused local variables in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.where(_.local.where(l => l.reference.isEmpty).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate methods suitable for inlining in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.caller.size == 1 && _.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display modules with circular dependencies.",
    "answer": "cpg.method.where(_.callee.callee.contains(_.method)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions with deep nesting levels in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.controlStructure.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List unused global variables in 'src/backend/utils/init'.",
    "answer": "cpg.file.name(\"src/backend/utils/init/.*\").member.where(_.reference.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions containing code clones.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions missing return statements.",
    "answer": "cpg.method.where(_.methodReturn.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify methods exceeding cyclomatic complexity of 20 in 'src/backend/commands'.",
    "answer": "cpg.file.name(\"src/backend/commands/.*\").method.where(_.cyclomaticComplexity > 20).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve mutually recursive functions in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").method.where(m => m.callee.name(m.name)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with unused local variables in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").method.where(_.local.where(l => l.reference.isEmpty).nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display methods suitable for inlining in 'src/backend/utils/adt'.",
    "answer": "cpg.file.name(\"src/backend/utils/adt/.*\").method.where(_.caller.size == 1 && _.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get modules with circular dependencies.",
    "answer": "cpg.method.where(_.callee.callee.contains(_.method)).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with deep nesting levels in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.controlStructure.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show unused global variables in 'src/backend/utils/init'.",
    "answer": "cpg.file.name(\"src/backend/utils/init/.*\").member.where(_.reference.isEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions containing code clones.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List modules with high coupling to others in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.callee.file.distinct.size)).l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions responsible for multiple tasks.",
    "answer": "cpg.method.where(_.controlStructure.size > 10 && _.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions using switch statements repeatedly.",
    "answer": "cpg.method.where(_.controlStructure.code.contains(\"switch\")).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify side effects of refactoring global variables to parameters in 'src/backend/access'.",
    "answer": "cpg.local.name(\"GlobalVariable\").caller.repeat(_.caller).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve types with too many methods in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").typeDecl.where(_.method.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate modules with high coupling to others in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.callee.file.distinct.size)).l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions responsible for multiple tasks.",
    "answer": "cpg.method.where(_.controlStructure.size > 10 && _.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions using switch statements repeatedly.",
    "answer": "cpg.method.where(_.controlStructure.code.contains(\"switch\")).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List side effects of refactoring global variables to parameters in 'src/backend/access'.",
    "answer": "cpg.local.name(\"GlobalVariable\").caller.repeat(_.caller).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show types with too many methods in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").typeDecl.where(_.method.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find modules with high coupling to others in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.callee.file.distinct.size)).l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions responsible for multiple tasks.",
    "answer": "cpg.method.where(_.controlStructure.size > 10 && _.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions using switch statements repeatedly.",
    "answer": "cpg.method.where(_.controlStructure.code.contains(\"switch\")).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate side effects of refactoring global variables to parameters in 'src/backend/access'.",
    "answer": "cpg.local.name(\"GlobalVariable\").caller.repeat(_.caller).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display types with too many methods in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").typeDecl.where(_.method.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get modules with high coupling to others in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.callee.file.distinct.size)).l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions responsible for multiple tasks.",
    "answer": "cpg.method.where(_.controlStructure.size > 10 && _.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions using switch statements repeatedly.",
    "answer": "cpg.method.where(_.controlStructure.code.contains(\"switch\")).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find side effects of refactoring global variables to parameters in 'src/backend/access'.",
    "answer": "cpg.local.name(\"GlobalVariable\").caller.repeat(_.caller).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify types with too many methods in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").typeDecl.where(_.method.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve modules with high coupling to others in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").map(f => (f.name, f.method.callee.file.distinct.size)).l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions responsible for multiple tasks.",
    "answer": "cpg.method.where(_.controlStructure.size > 10 && _.local.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions using switch statements repeatedly.",
    "answer": "cpg.method.where(_.controlStructure.code.contains(\"switch\")).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get side effects of refactoring global variables to parameters in 'src/backend/access'.",
    "answer": "cpg.local.name(\"GlobalVariable\").caller.repeat(_.caller).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List types with too many methods in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").typeDecl.where(_.method.size > 10).name.l",
    "scenario": 5,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List loops in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").controlStructure.loopType.code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show recursive functions in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'pg_usleep'.",
    "answer": "cpg.call.name(\"pg_usleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions allocating memory inside loops in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions containing nested loops in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'pg_sleep'.",
    "answer": "cpg.call.name(\"pg_sleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that call 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get recursion without base case in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.isRecursive && _.call.name(\"<operator>.equals\").isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List loops iterating over arrays in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.code.contains(\"[]\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show methods calling 'elog' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"elog\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find loops in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").controlStructure.loopType.code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify recursive functions in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'pg_usleep'.",
    "answer": "cpg.call.name(\"pg_usleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions allocating memory inside loops in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions containing nested loops in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'pg_sleep'.",
    "answer": "cpg.call.name(\"pg_sleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that call 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show recursion without base case in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.isRecursive && _.call.name(\"<operator>.equals\").isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find loops iterating over arrays in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.code.contains(\"[]\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify methods calling 'elog' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"elog\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve loops in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").controlStructure.loopType.code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate recursive functions in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'pg_usleep'.",
    "answer": "cpg.call.name(\"pg_usleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions allocating memory inside loops in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions containing nested loops in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'pg_sleep'.",
    "answer": "cpg.call.name(\"pg_sleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that call 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify recursion without base case in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.isRecursive && _.call.name(\"<operator>.equals\").isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve loops iterating over arrays in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.code.contains(\"[]\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate methods calling 'elog' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"elog\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display loops in 'src/backend/executor'.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").controlStructure.loopType.code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get recursive functions in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'pg_usleep'.",
    "answer": "cpg.call.name(\"pg_usleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions allocating memory inside loops in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions containing nested loops in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'pg_sleep'.",
    "answer": "cpg.call.name(\"pg_sleep\").code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that call 'pfree'.",
    "answer": "cpg.method.where(_.call.name(\"pfree\").nonEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate recursion without base case in 'src/backend/catalog'.",
    "answer": "cpg.file.name(\"src/backend/catalog/.*\").method.where(_.isRecursive && _.call.name(\"<operator>.equals\").isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display loops iterating over arrays in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.code.contains(\"[]\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get methods calling 'elog' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"elog\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List loops with bounds larger than one million in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.condition.code.matches(\".*< 1000000.*\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods with cyclomatic complexity over 30 in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.cyclomaticComplexity > 30).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find recursive functions with no loop alternative in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive && _.controlStructure.loopType.isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions that frequently allocate and free memory.",
    "answer": "cpg.method.where(_.call.name(\"palloc|pfree\").size > 5).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve loops without body content in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").controlStructure.loopType.where(_.astChildren.isEmpty).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate methods containing nested loops with I/O operations.",
    "answer": "cpg.method.where(_.controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that call 'pg_usleep' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"pg_usleep\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods with deep recursion in 'src/backend'.",
    "answer": "cpg.method.where(_.isRecursive && _.caller.size > 10).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions using global variables inside loops in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").controlStructure.loopType.where(_.identifier.name(\"Global\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show loops with bounds larger than one million in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.condition.code.matches(\".*< 1000000.*\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods with cyclomatic complexity over 30 in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.cyclomaticComplexity > 30).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify recursive functions with no loop alternative in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive && _.controlStructure.loopType.isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions that frequently allocate and free memory.",
    "answer": "cpg.method.where(_.call.name(\"palloc|pfree\").size > 5).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate loops without body content in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").controlStructure.loopType.where(_.astChildren.isEmpty).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display methods containing nested loops with I/O operations.",
    "answer": "cpg.method.where(_.controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that call 'pg_usleep' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"pg_usleep\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods with deep recursion in 'src/backend'.",
    "answer": "cpg.method.where(_.isRecursive && _.caller.size > 10).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions using global variables inside loops in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").controlStructure.loopType.where(_.identifier.name(\"Global\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find loops with bounds larger than one million in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.condition.code.matches(\".*< 1000000.*\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify methods with cyclomatic complexity over 30 in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.cyclomaticComplexity > 30).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve recursive functions with no loop alternative in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive && _.controlStructure.loopType.isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that frequently allocate and free memory.",
    "answer": "cpg.method.where(_.call.name(\"palloc|pfree\").size > 5).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display loops without body content in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").controlStructure.loopType.where(_.astChildren.isEmpty).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods containing nested loops with I/O operations.",
    "answer": "cpg.method.where(_.controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that call 'pg_usleep' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"pg_usleep\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods with deep recursion in 'src/backend'.",
    "answer": "cpg.method.where(_.isRecursive && _.caller.size > 10).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions using global variables inside loops in 'src/backend/utils/misc'.",
    "answer": "cpg.file.name(\"src/backend/utils/misc/.*\").controlStructure.loopType.where(_.identifier.name(\"Global\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify loops with bounds larger than one million in 'src/backend/utils/sort'.",
    "answer": "cpg.file.name(\"src/backend/utils/sort/.*\").controlStructure.loopType.where(_.condition.code.matches(\".*< 1000000.*\")).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve methods with cyclomatic complexity over 30 in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.cyclomaticComplexity > 30).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate recursive functions with no loop alternative in 'src/backend/parser'.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").method.where(_.isRecursive && _.controlStructure.loopType.isEmpty).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that frequently allocate and free memory.",
    "answer": "cpg.method.where(_.call.name(\"palloc|pfree\").size > 5).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get loops without body content in 'src/backend/storage'.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").controlStructure.loopType.where(_.astChildren.isEmpty).code.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods containing nested loops with I/O operations.",
    "answer": "cpg.method.where(_.controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that call 'pg_usleep' inside loops.",
    "answer": "cpg.controlStructure.loopType.where(_.call.name(\"pg_usleep\").nonEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods with deep recursion in 'src/backend'.",
    "answer": "cpg.method.where(_.isRecursive && _.caller.size > 10).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List nested loops performing repeated disk I/O in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show recursive methods with large call depth in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.isRecursive && _.caller.size > 20).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find loops allocating memory without deallocation in 'src/backend/tsearch'.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify nested loops executing database operations in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"heap_insert|heap_update|heap_delete|index_insert\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve loops performing expensive operations without caching.",
    "answer": "cpg.controlStructure.loopType.call.where(_.signature.contains(\"expensive\")).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate nested loops performing repeated disk I/O in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display recursive methods with large call depth in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.isRecursive && _.caller.size > 20).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get loops allocating memory without deallocation in 'src/backend/tsearch'.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List nested loops executing database operations in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"heap_insert|heap_update|heap_delete|index_insert\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show loops performing expensive operations without caching.",
    "answer": "cpg.controlStructure.loopType.call.where(_.signature.contains(\"expensive\")).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find nested loops performing repeated disk I/O in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify recursive methods with large call depth in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.isRecursive && _.caller.size > 20).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve loops allocating memory without deallocation in 'src/backend/tsearch'.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate nested loops executing database operations in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"heap_insert|heap_update|heap_delete|index_insert\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display loops performing expensive operations without caching.",
    "answer": "cpg.controlStructure.loopType.call.where(_.signature.contains(\"expensive\")).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get nested loops performing repeated disk I/O in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List recursive methods with large call depth in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.isRecursive && _.caller.size > 20).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show loops allocating memory without deallocation in 'src/backend/tsearch'.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find nested loops executing database operations in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"heap_insert|heap_update|heap_delete|index_insert\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify loops performing expensive operations without caching.",
    "answer": "cpg.controlStructure.loopType.call.where(_.signature.contains(\"expensive\")).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve nested loops performing repeated disk I/O in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"read|write|ReadBuffer\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate recursive methods with large call depth in 'src/backend/optimizer'.",
    "answer": "cpg.file.name(\"src/backend/optimizer/.*\").method.where(_.isRecursive && _.caller.size > 20).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display loops allocating memory without deallocation in 'src/backend/tsearch'.",
    "answer": "cpg.file.name(\"src/backend/tsearch/.*\").controlStructure.loopType.where(_.call.name(\"palloc\").nonEmpty && _.call.name(\"pfree\").isEmpty).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get nested loops executing database operations in 'src/backend/access'.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").controlStructure.loopType.where(_.call.name(\"heap_insert|heap_update|heap_delete|index_insert\").nonEmpty).method.where(_.controlStructure.loopType.size > 1).name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List loops performing expensive operations without caching.",
    "answer": "cpg.controlStructure.loopType.call.where(_.signature.contains(\"expensive\")).method.name.l",
    "scenario": 6,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List test files in 'src/test/regress'.",
    "answer": "cpg.file.name(\"src/test/regress/.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions defined in test modules in 'src/test/modules'.",
    "answer": "cpg.file.name(\"src/test/modules/.*\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find test functions that call 'heap_insert'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"heap_insert\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify methods starting with 'test_' in test directories.",
    "answer": "cpg.method.name(\"^test_.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve test cases using 'assert_true'.",
    "answer": "cpg.call.name(\"assert_true\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate test functions reading from files.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"fopen|FileRead\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display test functions using environment variables.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"getenv\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get test cases with setup functions.",
    "answer": "cpg.call.name(\"setup\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List test functions that have teardown calls.",
    "answer": "cpg.call.name(\"teardown\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show test cases using 'SPI_execute'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"SPI_execute\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find test files in 'src/test/regress'.",
    "answer": "cpg.file.name(\"src/test/regress/.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions defined in test modules in 'src/test/modules'.",
    "answer": "cpg.file.name(\"src/test/modules/.*\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve test functions that call 'heap_insert'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"heap_insert\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate methods starting with 'test_' in test directories.",
    "answer": "cpg.method.name(\"^test_.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display test cases using 'assert_true'.",
    "answer": "cpg.call.name(\"assert_true\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get test functions reading from files.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"fopen|FileRead\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List test functions using environment variables.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"getenv\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show test cases with setup functions.",
    "answer": "cpg.call.name(\"setup\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find test functions that have teardown calls.",
    "answer": "cpg.call.name(\"teardown\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify test cases using 'SPI_execute'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"SPI_execute\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve test files in 'src/test/regress'.",
    "answer": "cpg.file.name(\"src/test/regress/.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions defined in test modules in 'src/test/modules'.",
    "answer": "cpg.file.name(\"src/test/modules/.*\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display test functions that call 'heap_insert'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"heap_insert\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get methods starting with 'test_' in test directories.",
    "answer": "cpg.method.name(\"^test_.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List test cases using 'assert_true'.",
    "answer": "cpg.call.name(\"assert_true\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show test functions reading from files.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"fopen|FileRead\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find test functions using environment variables.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"getenv\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify test cases with setup functions.",
    "answer": "cpg.call.name(\"setup\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve test functions that have teardown calls.",
    "answer": "cpg.call.name(\"teardown\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate test cases using 'SPI_execute'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"SPI_execute\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display test files in 'src/test/regress'.",
    "answer": "cpg.file.name(\"src/test/regress/.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions defined in test modules in 'src/test/modules'.",
    "answer": "cpg.file.name(\"src/test/modules/.*\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List test functions that call 'heap_insert'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"heap_insert\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show methods starting with 'test_' in test directories.",
    "answer": "cpg.method.name(\"^test_.*\").l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find test cases using 'assert_true'.",
    "answer": "cpg.call.name(\"assert_true\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify test functions reading from files.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"fopen|FileRead\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve test functions using environment variables.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"getenv\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate test cases with setup functions.",
    "answer": "cpg.call.name(\"setup\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display test functions that have teardown calls.",
    "answer": "cpg.call.name(\"teardown\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get test cases using 'SPI_execute'.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"SPI_execute\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List production functions not called by any test in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show tests covering the 'heap_insert' function.",
    "answer": "cpg.method.name(\"heap_insert\").caller.file.name(\"src/test/.*\").name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods covered by tests.",
    "answer": "cpg.file.name(\"src/test/.*\").callee.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify test functions without any assertions.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"assert\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve tests using data providers.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"generate_series\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate tests invoking performance benchmarks.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"pg_bench\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display test cases that mock network calls.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"mock_network\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get tests that call deprecated functions.",
    "answer": "cpg.file.name(\"src/test/.*\").call.where(_.callee.isDeprecated).method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List tests that cover error handling paths.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"ereport|elog\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show production functions not called by any test in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find tests covering the 'heap_insert' function.",
    "answer": "cpg.method.name(\"heap_insert\").caller.file.name(\"src/test/.*\").name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify methods covered by tests.",
    "answer": "cpg.file.name(\"src/test/.*\").callee.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve test functions without any assertions.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"assert\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate tests using data providers.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"generate_series\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display tests invoking performance benchmarks.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"pg_bench\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get test cases that mock network calls.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"mock_network\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List tests that call deprecated functions.",
    "answer": "cpg.file.name(\"src/test/.*\").call.where(_.callee.isDeprecated).method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show tests that cover error handling paths.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"ereport|elog\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find production functions not called by any test in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify tests covering the 'heap_insert' function.",
    "answer": "cpg.method.name(\"heap_insert\").caller.file.name(\"src/test/.*\").name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve methods covered by tests.",
    "answer": "cpg.file.name(\"src/test/.*\").callee.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate test functions without any assertions.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"assert\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display tests using data providers.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"generate_series\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get tests invoking performance benchmarks.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"pg_bench\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List test cases that mock network calls.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"mock_network\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show tests that call deprecated functions.",
    "answer": "cpg.file.name(\"src/test/.*\").call.where(_.callee.isDeprecated).method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find tests that cover error handling paths.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"ereport|elog\").nonEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify production functions not called by any test in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve tests covering the 'heap_insert' function.",
    "answer": "cpg.method.name(\"heap_insert\").caller.file.name(\"src/test/.*\").name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate methods covered by tests.",
    "answer": "cpg.file.name(\"src/test/.*\").callee.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display test functions without any assertions.",
    "answer": "cpg.file.name(\"src/test/.*\").method.where(_.call.name(\"assert\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get tests using data providers.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"generate_series\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List tests invoking performance benchmarks.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"pg_bench\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show test cases that mock network calls.",
    "answer": "cpg.file.name(\"src/test/.*\").call.name(\"mock_network\").method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find tests that call deprecated functions.",
    "answer": "cpg.file.name(\"src/test/.*\").call.where(_.callee.isDeprecated).method.name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List code areas in 'src/backend' not covered by tests.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show public API functions without test coverage.",
    "answer": "cpg.method.isPublic.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find data flows from test inputs to function outputs.",
    "answer": "cpg.file.name(\"src/test/.*\").call.argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions where negative branches are untested in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.controlStructure.size > 0 && _.caller.file.name(\"src/test/.*\").size < 2).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve performance-critical functions without benchmark coverage.",
    "answer": "cpg.method.where(_.annotation(\"Benchmark\").isDefined && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate code areas in 'src/backend' not covered by tests.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display public API functions without test coverage.",
    "answer": "cpg.method.isPublic.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get data flows from test inputs to function outputs.",
    "answer": "cpg.file.name(\"src/test/.*\").call.argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions where negative branches are untested in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.controlStructure.size > 0 && _.caller.file.name(\"src/test/.*\").size < 2).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show performance-critical functions without benchmark coverage.",
    "answer": "cpg.method.where(_.annotation(\"Benchmark\").isDefined && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find code areas in 'src/backend' not covered by tests.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify public API functions without test coverage.",
    "answer": "cpg.method.isPublic.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve data flows from test inputs to function outputs.",
    "answer": "cpg.file.name(\"src/test/.*\").call.argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions where negative branches are untested in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.controlStructure.size > 0 && _.caller.file.name(\"src/test/.*\").size < 2).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display performance-critical functions without benchmark coverage.",
    "answer": "cpg.method.where(_.annotation(\"Benchmark\").isDefined && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get code areas in 'src/backend' not covered by tests.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List public API functions without test coverage.",
    "answer": "cpg.method.isPublic.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show data flows from test inputs to function outputs.",
    "answer": "cpg.file.name(\"src/test/.*\").call.argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions where negative branches are untested in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.controlStructure.size > 0 && _.caller.file.name(\"src/test/.*\").size < 2).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify performance-critical functions without benchmark coverage.",
    "answer": "cpg.method.where(_.annotation(\"Benchmark\").isDefined && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve code areas in 'src/backend' not covered by tests.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate public API functions without test coverage.",
    "answer": "cpg.method.isPublic.where(_.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display data flows from test inputs to function outputs.",
    "answer": "cpg.file.name(\"src/test/.*\").call.argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions where negative branches are untested in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.controlStructure.size > 0 && _.caller.file.name(\"src/test/.*\").size < 2).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List performance-critical functions without benchmark coverage.",
    "answer": "cpg.method.where(_.annotation(\"Benchmark\").isDefined && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 7,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List calls to cryptographic functions MD5 or SHA1 in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD5|SHA1|md5|sha1\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of random number generator 'pg_strong_random' or 'random'.",
    "answer": "cpg.call.name(\"pg_strong_random|random\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find hardcoded credentials in literal strings.",
    "answer": "cpg.literal.code(\"\"[A-Za-z0-9]{8,}\"\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify TLS or SSL protocol versions used in code.",
    "answer": "cpg.literal.code(\"TLSv1.0|SSLv3\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that disable certificate validation in 'src/backend/libpq'.",
    "answer": "cpg.call.name(\"SSL_set_verify\").where(_.argument.code.contains(\"SSL_VERIFY_NONE\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of DES encryption functions in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"DES_.*\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to 'strcpy' into fixed-size buffers in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get insecure HTTP URLs in the code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List uses of insecure hashing algorithms like MD4 or RIPEMD.",
    "answer": "cpg.call.name(\"MD4|RIPEMD|md4|rmd160\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'strdup' that may leak memory.",
    "answer": "cpg.call.name(\"strdup\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to cryptographic functions MD5 or SHA1 in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD5|SHA1|md5|sha1\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of random number generator 'pg_strong_random' or 'random'.",
    "answer": "cpg.call.name(\"pg_strong_random|random\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve hardcoded credentials in literal strings.",
    "answer": "cpg.literal.code(\"\"[A-Za-z0-9]{8,}\"\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate TLS or SSL protocol versions used in code.",
    "answer": "cpg.literal.code(\"TLSv1.0|SSLv3\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that disable certificate validation in 'src/backend/libpq'.",
    "answer": "cpg.call.name(\"SSL_set_verify\").where(_.argument.code.contains(\"SSL_VERIFY_NONE\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of DES encryption functions in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"DES_.*\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List calls to 'strcpy' into fixed-size buffers in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show insecure HTTP URLs in the code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find uses of insecure hashing algorithms like MD4 or RIPEMD.",
    "answer": "cpg.call.name(\"MD4|RIPEMD|md4|rmd160\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'strdup' that may leak memory.",
    "answer": "cpg.call.name(\"strdup\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to cryptographic functions MD5 or SHA1 in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD5|SHA1|md5|sha1\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of random number generator 'pg_strong_random' or 'random'.",
    "answer": "cpg.call.name(\"pg_strong_random|random\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display hardcoded credentials in literal strings.",
    "answer": "cpg.literal.code(\"\"[A-Za-z0-9]{8,}\"\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get TLS or SSL protocol versions used in code.",
    "answer": "cpg.literal.code(\"TLSv1.0|SSLv3\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that disable certificate validation in 'src/backend/libpq'.",
    "answer": "cpg.call.name(\"SSL_set_verify\").where(_.argument.code.contains(\"SSL_VERIFY_NONE\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of DES encryption functions in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"DES_.*\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls to 'strcpy' into fixed-size buffers in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify insecure HTTP URLs in the code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve uses of insecure hashing algorithms like MD4 or RIPEMD.",
    "answer": "cpg.call.name(\"MD4|RIPEMD|md4|rmd160\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'strdup' that may leak memory.",
    "answer": "cpg.call.name(\"strdup\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls to cryptographic functions MD5 or SHA1 in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD5|SHA1|md5|sha1\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of random number generator 'pg_strong_random' or 'random'.",
    "answer": "cpg.call.name(\"pg_strong_random|random\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List hardcoded credentials in literal strings.",
    "answer": "cpg.literal.code(\"\"[A-Za-z0-9]{8,}\"\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show TLS or SSL protocol versions used in code.",
    "answer": "cpg.literal.code(\"TLSv1.0|SSLv3\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that disable certificate validation in 'src/backend/libpq'.",
    "answer": "cpg.call.name(\"SSL_set_verify\").where(_.argument.code.contains(\"SSL_VERIFY_NONE\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of DES encryption functions in 'contrib/pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"DES_.*\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls to 'strcpy' into fixed-size buffers in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate insecure HTTP URLs in the code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display uses of insecure hashing algorithms like MD4 or RIPEMD.",
    "answer": "cpg.call.name(\"MD4|RIPEMD|md4|rmd160\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'strdup' that may leak memory.",
    "answer": "cpg.call.name(\"strdup\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List encryption functions used with ECB mode in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"AES_set_encrypt_key\").where(_.argument.code.contains(\"ECB\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show personal data flowing to logging functions.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|ssn|email\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find uses of insecure hashing functions in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD4|RIPEMD\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify copies using 'strcpy' into arrays in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve insecure HTTP protocol usages in code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate uses of insecure random functions for cryptographic tokens.",
    "answer": "cpg.call.name(\"random|pg_lrand48\").method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that log sensitive data in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get calls to 'sprintf' that may overflow.",
    "answer": "cpg.call.name(\"sprintf\").where(_.argument.size < 3).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List insecure hashing within loops in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").controlStructure.loopType.where(_.call.name(\"MD5|SHA1|MD4\").nonEmpty).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show encryption functions used with ECB mode in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"AES_set_encrypt_key\").where(_.argument.code.contains(\"ECB\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find personal data flowing to logging functions.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|ssn|email\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify uses of insecure hashing functions in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD4|RIPEMD\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve copies using 'strcpy' into arrays in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate insecure HTTP protocol usages in code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display uses of insecure random functions for cryptographic tokens.",
    "answer": "cpg.call.name(\"random|pg_lrand48\").method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that log sensitive data in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List calls to 'sprintf' that may overflow.",
    "answer": "cpg.call.name(\"sprintf\").where(_.argument.size < 3).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show insecure hashing within loops in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").controlStructure.loopType.where(_.call.name(\"MD5|SHA1|MD4\").nonEmpty).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find encryption functions used with ECB mode in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"AES_set_encrypt_key\").where(_.argument.code.contains(\"ECB\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify personal data flowing to logging functions.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|ssn|email\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve uses of insecure hashing functions in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD4|RIPEMD\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate copies using 'strcpy' into arrays in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display insecure HTTP protocol usages in code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get uses of insecure random functions for cryptographic tokens.",
    "answer": "cpg.call.name(\"random|pg_lrand48\").method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that log sensitive data in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show calls to 'sprintf' that may overflow.",
    "answer": "cpg.call.name(\"sprintf\").where(_.argument.size < 3).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find insecure hashing within loops in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").controlStructure.loopType.where(_.call.name(\"MD5|SHA1|MD4\").nonEmpty).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify encryption functions used with ECB mode in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"AES_set_encrypt_key\").where(_.argument.code.contains(\"ECB\")).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve personal data flowing to logging functions.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|ssn|email\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate uses of insecure hashing functions in 'pgcrypto'.",
    "answer": "cpg.file.name(\"contrib/pgcrypto/.*\").call.name(\"MD4|RIPEMD\").code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display copies using 'strcpy' into arrays in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"strcpy\").where(_.argument(1).code.contains(\"[\")).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get insecure HTTP protocol usages in code.",
    "answer": "cpg.literal.code(\"http://.*\").l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List uses of insecure random functions for cryptographic tokens.",
    "answer": "cpg.call.name(\"random|pg_lrand48\").method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that log sensitive data in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find calls to 'sprintf' that may overflow.",
    "answer": "cpg.call.name(\"sprintf\").where(_.argument.size < 3).code.l",
    "scenario": 8,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List sensitive data flowing to 'elog' or 'ereport'.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show insecure cryptography usage across modules.",
    "answer": "cpg.call.name(\"DES_.*|des_.*\").where(_.method.file.name.not(\"contrib/pgcrypto/.*\")).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find credentials sent over network.",
    "answer": "cpg.call.name(\"send|pq_send\").where(_.argument.reachableBy(cpg.identifier.name(\"user|password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify personal data written to files.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"ssn|creditCard\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve deprecated SSL protocols usage in the call graph.",
    "answer": "cpg.call.name(\"SSLv2|SSLv3|TLSv1\").caller.repeat(_.caller).name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate sensitive data flowing to 'elog' or 'ereport'.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display insecure cryptography usage across modules.",
    "answer": "cpg.call.name(\"DES_.*|des_.*\").where(_.method.file.name.not(\"contrib/pgcrypto/.*\")).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get credentials sent over network.",
    "answer": "cpg.call.name(\"send|pq_send\").where(_.argument.reachableBy(cpg.identifier.name(\"user|password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List personal data written to files.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"ssn|creditCard\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show deprecated SSL protocols usage in the call graph.",
    "answer": "cpg.call.name(\"SSLv2|SSLv3|TLSv1\").caller.repeat(_.caller).name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find sensitive data flowing to 'elog' or 'ereport'.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify insecure cryptography usage across modules.",
    "answer": "cpg.call.name(\"DES_.*|des_.*\").where(_.method.file.name.not(\"contrib/pgcrypto/.*\")).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve credentials sent over network.",
    "answer": "cpg.call.name(\"send|pq_send\").where(_.argument.reachableBy(cpg.identifier.name(\"user|password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate personal data written to files.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"ssn|creditCard\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display deprecated SSL protocols usage in the call graph.",
    "answer": "cpg.call.name(\"SSLv2|SSLv3|TLSv1\").caller.repeat(_.caller).name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get sensitive data flowing to 'elog' or 'ereport'.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List insecure cryptography usage across modules.",
    "answer": "cpg.call.name(\"DES_.*|des_.*\").where(_.method.file.name.not(\"contrib/pgcrypto/.*\")).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show credentials sent over network.",
    "answer": "cpg.call.name(\"send|pq_send\").where(_.argument.reachableBy(cpg.identifier.name(\"user|password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find personal data written to files.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"ssn|creditCard\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify deprecated SSL protocols usage in the call graph.",
    "answer": "cpg.call.name(\"SSLv2|SSLv3|TLSv1\").caller.repeat(_.caller).name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve sensitive data flowing to 'elog' or 'ereport'.",
    "answer": "cpg.call.name(\"elog|ereport\").where(_.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate insecure cryptography usage across modules.",
    "answer": "cpg.call.name(\"DES_.*|des_.*\").where(_.method.file.name.not(\"contrib/pgcrypto/.*\")).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display credentials sent over network.",
    "answer": "cpg.call.name(\"send|pq_send\").where(_.argument.reachableBy(cpg.identifier.name(\"user|password\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get personal data written to files.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"ssn|creditCard\")).nonEmpty).l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List deprecated SSL protocols usage in the call graph.",
    "answer": "cpg.call.name(\"SSLv2|SSLv3|TLSv1\").caller.repeat(_.caller).name.l",
    "scenario": 8,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List recently changed files.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions with TODO comments.",
    "answer": "cpg.method.comment.code(\".*TODO.*\").method.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions modified in the latest release commit.",
    "answer": "cpg.method.where(_.tagList.contains(\"modified\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions with high change frequency in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.count(_ == \"change\") > 5).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve new public methods added in this release.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate lines modified by formatting changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions changed by multiple developers.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get deprecated functions used in recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.isDeprecated).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List recently added functions without comments.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.comment.isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show files with large modifications in one commit.",
    "answer": "cpg.file.where(_.tagList.contains(\"big-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find recently changed files.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions with TODO comments.",
    "answer": "cpg.method.comment.code(\".*TODO.*\").method.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions modified in the latest release commit.",
    "answer": "cpg.method.where(_.tagList.contains(\"modified\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions with high change frequency in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.count(_ == \"change\") > 5).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display new public methods added in this release.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get lines modified by formatting changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions changed by multiple developers.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show deprecated functions used in recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.isDeprecated).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find recently added functions without comments.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.comment.isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify files with large modifications in one commit.",
    "answer": "cpg.file.where(_.tagList.contains(\"big-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve recently changed files.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions with TODO comments.",
    "answer": "cpg.method.comment.code(\".*TODO.*\").method.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions modified in the latest release commit.",
    "answer": "cpg.method.where(_.tagList.contains(\"modified\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions with high change frequency in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.count(_ == \"change\") > 5).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List new public methods added in this release.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show lines modified by formatting changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions changed by multiple developers.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify deprecated functions used in recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.isDeprecated).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve recently added functions without comments.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.comment.isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate files with large modifications in one commit.",
    "answer": "cpg.file.where(_.tagList.contains(\"big-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display recently changed files.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions with TODO comments.",
    "answer": "cpg.method.comment.code(\".*TODO.*\").method.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions modified in the latest release commit.",
    "answer": "cpg.method.where(_.tagList.contains(\"modified\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions with high change frequency in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.count(_ == \"change\") > 5).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find new public methods added in this release.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify lines modified by formatting changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions changed by multiple developers.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate deprecated functions used in recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.isDeprecated).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display recently added functions without comments.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.comment.isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get files with large modifications in one commit.",
    "answer": "cpg.file.where(_.tagList.contains(\"big-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List new functions lacking tests in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with indentation changes in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find code blocks modified by more than one author.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify recently changed functions that call deprecated functions.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.where(_.callee.isDeprecated).nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve tests missing for newly added public APIs.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with high churn rate in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.tagList.count(_ == \"change\") > 10).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display recently added functions that use global variables.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.local.name(\"Global\").nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods introduced in refactors that cross modules.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\") && _.caller.file.size > 1).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List recently changed functions with no parameter validation.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.name(\"Assert\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show new functions lacking tests in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with indentation changes in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify code blocks modified by more than one author.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve recently changed functions that call deprecated functions.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.where(_.callee.isDeprecated).nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate tests missing for newly added public APIs.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with high churn rate in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.tagList.count(_ == \"change\") > 10).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get recently added functions that use global variables.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.local.name(\"Global\").nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods introduced in refactors that cross modules.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\") && _.caller.file.size > 1).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show recently changed functions with no parameter validation.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.name(\"Assert\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find new functions lacking tests in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with indentation changes in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve code blocks modified by more than one author.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate recently changed functions that call deprecated functions.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.where(_.callee.isDeprecated).nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display tests missing for newly added public APIs.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions with high churn rate in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.tagList.count(_ == \"change\") > 10).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List recently added functions that use global variables.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.local.name(\"Global\").nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods introduced in refactors that cross modules.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\") && _.caller.file.size > 1).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find recently changed functions with no parameter validation.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.name(\"Assert\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify new functions lacking tests in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with indentation changes in 'src/backend'.",
    "answer": "cpg.file.name(\"src/backend/.*\").method.where(_.tagList.contains(\"format-change\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate code blocks modified by more than one author.",
    "answer": "cpg.method.where(_.tagList.contains(\"multi-author\")).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display recently changed functions that call deprecated functions.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.call.where(_.callee.isDeprecated).nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get tests missing for newly added public APIs.",
    "answer": "cpg.method.isPublic.where(_.tagList.contains(\"recent-change\") && _.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with high churn rate in 'src/backend/utils'.",
    "answer": "cpg.file.name(\"src/backend/utils/.*\").method.where(_.tagList.count(_ == \"change\") > 10).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show recently added functions that use global variables.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.local.name(\"Global\").nonEmpty).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods introduced in refactors that cross modules.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\") && _.caller.file.size > 1).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List impact of changes to the 'ExecEndPlan' function.",
    "answer": "cpg.method.name(\"ExecEndPlan\").caller.repeat(_.caller).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show possible regressions from modifying global variables in 'src/backend/catalog'.",
    "answer": "cpg.tag.name(\"recent-change\").method.where(_.local.name(\"GlobalVariable\")).caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find changed functions leading to security-critical sinks.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify new data flows introduced by recent changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).argument.reachableByFlows(cpg.call.name(\"pq_getmessage|CopyFrom\")).locations.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve cross-module dependencies created during refactorings.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\")).caller.caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate impact of changes to the 'ExecEndPlan' function.",
    "answer": "cpg.method.name(\"ExecEndPlan\").caller.repeat(_.caller).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display possible regressions from modifying global variables in 'src/backend/catalog'.",
    "answer": "cpg.tag.name(\"recent-change\").method.where(_.local.name(\"GlobalVariable\")).caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get changed functions leading to security-critical sinks.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List new data flows introduced by recent changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).argument.reachableByFlows(cpg.call.name(\"pq_getmessage|CopyFrom\")).locations.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show cross-module dependencies created during refactorings.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\")).caller.caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find impact of changes to the 'ExecEndPlan' function.",
    "answer": "cpg.method.name(\"ExecEndPlan\").caller.repeat(_.caller).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify possible regressions from modifying global variables in 'src/backend/catalog'.",
    "answer": "cpg.tag.name(\"recent-change\").method.where(_.local.name(\"GlobalVariable\")).caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve changed functions leading to security-critical sinks.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate new data flows introduced by recent changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).argument.reachableByFlows(cpg.call.name(\"pq_getmessage|CopyFrom\")).locations.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display cross-module dependencies created during refactorings.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\")).caller.caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get impact of changes to the 'ExecEndPlan' function.",
    "answer": "cpg.method.name(\"ExecEndPlan\").caller.repeat(_.caller).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List possible regressions from modifying global variables in 'src/backend/catalog'.",
    "answer": "cpg.tag.name(\"recent-change\").method.where(_.local.name(\"GlobalVariable\")).caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show changed functions leading to security-critical sinks.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find new data flows introduced by recent changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).argument.reachableByFlows(cpg.call.name(\"pq_getmessage|CopyFrom\")).locations.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify cross-module dependencies created during refactorings.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\")).caller.caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve impact of changes to the 'ExecEndPlan' function.",
    "answer": "cpg.method.name(\"ExecEndPlan\").caller.repeat(_.caller).name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate possible regressions from modifying global variables in 'src/backend/catalog'.",
    "answer": "cpg.tag.name(\"recent-change\").method.where(_.local.name(\"GlobalVariable\")).caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display changed functions leading to security-critical sinks.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).call.name(\"ereport\").where(_.argument.code.contains(\"PANIC\")).code.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get new data flows introduced by recent changes.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\")).argument.reachableByFlows(cpg.call.name(\"pq_getmessage|CopyFrom\")).locations.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List cross-module dependencies created during refactorings.",
    "answer": "cpg.method.where(_.tagList.contains(\"refactor\")).caller.caller.name.l",
    "scenario": 9,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions with the same name across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to functions defined in a different module.",
    "answer": "cpg.call.where(_.method.file != _.callee.file).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find shared type declarations across modules.",
    "answer": "cpg.typeDecl.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify files imported from external directories.",
    "answer": "cpg.file.name(\"^../\").l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions from one module used in another in 'src/backend'.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"src/backend/\")).callee.where(_.file.name.not(_.file.name)).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls crossing module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display types defined in one module and used in another.",
    "answer": "cpg.typeDecl.where(_.referencingMembers.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions defined outside the main source tree.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"../\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List duplicated functions across modules by signature.",
    "answer": "cpg.method.groupBy(_.signature).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls into external APIs.",
    "answer": "cpg.call.where(_.callee.fullName.startsWith(\"external::\")).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions with the same name across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to functions defined in a different module.",
    "answer": "cpg.call.where(_.method.file != _.callee.file).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve shared type declarations across modules.",
    "answer": "cpg.typeDecl.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate files imported from external directories.",
    "answer": "cpg.file.name(\"^../\").l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions from one module used in another in 'src/backend'.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"src/backend/\")).callee.where(_.file.name.not(_.file.name)).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls crossing module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List types defined in one module and used in another.",
    "answer": "cpg.typeDecl.where(_.referencingMembers.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions defined outside the main source tree.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"../\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find duplicated functions across modules by signature.",
    "answer": "cpg.method.groupBy(_.signature).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls into external APIs.",
    "answer": "cpg.call.where(_.callee.fullName.startsWith(\"external::\")).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions with the same name across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to functions defined in a different module.",
    "answer": "cpg.call.where(_.method.file != _.callee.file).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display shared type declarations across modules.",
    "answer": "cpg.typeDecl.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get files imported from external directories.",
    "answer": "cpg.file.name(\"^../\").l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions from one module used in another in 'src/backend'.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"src/backend/\")).callee.where(_.file.name.not(_.file.name)).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls crossing module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find types defined in one module and used in another.",
    "answer": "cpg.typeDecl.where(_.referencingMembers.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions defined outside the main source tree.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"../\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve duplicated functions across modules by signature.",
    "answer": "cpg.method.groupBy(_.signature).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls into external APIs.",
    "answer": "cpg.call.where(_.callee.fullName.startsWith(\"external::\")).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions with the same name across modules.",
    "answer": "cpg.method.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to functions defined in a different module.",
    "answer": "cpg.call.where(_.method.file != _.callee.file).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List shared type declarations across modules.",
    "answer": "cpg.typeDecl.groupBy(_.name).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show files imported from external directories.",
    "answer": "cpg.file.name(\"^../\").l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions from one module used in another in 'src/backend'.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"src/backend/\")).callee.where(_.file.name.not(_.file.name)).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls crossing module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve types defined in one module and used in another.",
    "answer": "cpg.typeDecl.where(_.referencingMembers.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions defined outside the main source tree.",
    "answer": "cpg.method.where(_.file.name.startsWith(\"../\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display duplicated functions across modules by signature.",
    "answer": "cpg.method.groupBy(_.signature).filter(_._2.size > 1).map(_._1).l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls into external APIs.",
    "answer": "cpg.call.where(_.callee.fullName.startsWith(\"external::\")).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List cross-module functions called by multiple modules.",
    "answer": "cpg.method.where(_.caller.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show types defined in one module and extended in others.",
    "answer": "cpg.typeDecl.where(_.inheritsFromType.nonEmpty && _.inheritsFromType.file.name != _.file.name).map(t => (t.name, t.inheritsFromType.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions changed in one module breaking dependencies in others.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name.contains(\"src/backend\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify data flows across module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name.startsWith(\"../\")).argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve shared global variables used in multiple modules.",
    "answer": "cpg.member.where(_.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions referencing types from other modules.",
    "answer": "cpg.method.where(_.typeRef.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display external API functions wrapped in local code.",
    "answer": "cpg.method.where(_.call.name.startsWith(\"external_\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get files that import modules from other directories.",
    "answer": "cpg.file.where(_.importedModules.nonEmpty && _.importedModules.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List cross-module calls introduced by recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show cross-module functions called by multiple modules.",
    "answer": "cpg.method.where(_.caller.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find types defined in one module and extended in others.",
    "answer": "cpg.typeDecl.where(_.inheritsFromType.nonEmpty && _.inheritsFromType.file.name != _.file.name).map(t => (t.name, t.inheritsFromType.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions changed in one module breaking dependencies in others.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name.contains(\"src/backend\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve data flows across module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name.startsWith(\"../\")).argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate shared global variables used in multiple modules.",
    "answer": "cpg.member.where(_.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions referencing types from other modules.",
    "answer": "cpg.method.where(_.typeRef.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get external API functions wrapped in local code.",
    "answer": "cpg.method.where(_.call.name.startsWith(\"external_\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List files that import modules from other directories.",
    "answer": "cpg.file.where(_.importedModules.nonEmpty && _.importedModules.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show cross-module calls introduced by recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find cross-module functions called by multiple modules.",
    "answer": "cpg.method.where(_.caller.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify types defined in one module and extended in others.",
    "answer": "cpg.typeDecl.where(_.inheritsFromType.nonEmpty && _.inheritsFromType.file.name != _.file.name).map(t => (t.name, t.inheritsFromType.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions changed in one module breaking dependencies in others.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name.contains(\"src/backend\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate data flows across module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name.startsWith(\"../\")).argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display shared global variables used in multiple modules.",
    "answer": "cpg.member.where(_.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions referencing types from other modules.",
    "answer": "cpg.method.where(_.typeRef.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List external API functions wrapped in local code.",
    "answer": "cpg.method.where(_.call.name.startsWith(\"external_\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show files that import modules from other directories.",
    "answer": "cpg.file.where(_.importedModules.nonEmpty && _.importedModules.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find cross-module calls introduced by recent changes.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify cross-module functions called by multiple modules.",
    "answer": "cpg.method.where(_.caller.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve types defined in one module and extended in others.",
    "answer": "cpg.typeDecl.where(_.inheritsFromType.nonEmpty && _.inheritsFromType.file.name != _.file.name).map(t => (t.name, t.inheritsFromType.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions changed in one module breaking dependencies in others.",
    "answer": "cpg.method.where(_.tagList.contains(\"recent-change\") && _.caller.file.name.contains(\"src/backend\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display data flows across module boundaries.",
    "answer": "cpg.call.where(_.callee.file.name.startsWith(\"../\")).argument.reachableByFlows(cpg.method.parameter).locations.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get shared global variables used in multiple modules.",
    "answer": "cpg.member.where(_.file.name.distinct.size > 1).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions referencing types from other modules.",
    "answer": "cpg.method.where(_.typeRef.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show external API functions wrapped in local code.",
    "answer": "cpg.method.where(_.call.name.startsWith(\"external_\")).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find files that import modules from other directories.",
    "answer": "cpg.file.where(_.importedModules.nonEmpty && _.importedModules.file.name != _.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List the dependency graph between modules.",
    "answer": "cpg.method.map(m => (m.file.name, m.callee.file.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show sensitive data flows across modules.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).argument.reachableBy(cpg.identifier.name(\"password|token\")).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find circular dependencies between modules.",
    "answer": "cpg.method.where(_.file.name != _.callee.file.name && _.callee.file.name != _.method.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify cross-module API usages introduced recently.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions impacted by changes in shared types.",
    "answer": "cpg.typeDecl.where(_.tagList.contains(\"recent-change\")).referencingMembers.method.name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate the dependency graph between modules.",
    "answer": "cpg.method.map(m => (m.file.name, m.callee.file.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display sensitive data flows across modules.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).argument.reachableBy(cpg.identifier.name(\"password|token\")).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get circular dependencies between modules.",
    "answer": "cpg.method.where(_.file.name != _.callee.file.name && _.callee.file.name != _.method.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List cross-module API usages introduced recently.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions impacted by changes in shared types.",
    "answer": "cpg.typeDecl.where(_.tagList.contains(\"recent-change\")).referencingMembers.method.name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find the dependency graph between modules.",
    "answer": "cpg.method.map(m => (m.file.name, m.callee.file.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify sensitive data flows across modules.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).argument.reachableBy(cpg.identifier.name(\"password|token\")).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve circular dependencies between modules.",
    "answer": "cpg.method.where(_.file.name != _.callee.file.name && _.callee.file.name != _.method.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate cross-module API usages introduced recently.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions impacted by changes in shared types.",
    "answer": "cpg.typeDecl.where(_.tagList.contains(\"recent-change\")).referencingMembers.method.name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get the dependency graph between modules.",
    "answer": "cpg.method.map(m => (m.file.name, m.callee.file.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List sensitive data flows across modules.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).argument.reachableBy(cpg.identifier.name(\"password|token\")).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show circular dependencies between modules.",
    "answer": "cpg.method.where(_.file.name != _.callee.file.name && _.callee.file.name != _.method.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find cross-module API usages introduced recently.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions impacted by changes in shared types.",
    "answer": "cpg.typeDecl.where(_.tagList.contains(\"recent-change\")).referencingMembers.method.name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve the dependency graph between modules.",
    "answer": "cpg.method.map(m => (m.file.name, m.callee.file.name)).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate sensitive data flows across modules.",
    "answer": "cpg.call.where(_.callee.file.name != _.file.name).argument.reachableBy(cpg.identifier.name(\"password|token\")).l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display circular dependencies between modules.",
    "answer": "cpg.method.where(_.file.name != _.callee.file.name && _.callee.file.name != _.method.file.name).name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get cross-module API usages introduced recently.",
    "answer": "cpg.call.where(_.tagList.contains(\"recent-change\") && _.callee.file.name != _.file.name).code.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions impacted by changes in shared types.",
    "answer": "cpg.typeDecl.where(_.tagList.contains(\"recent-change\")).referencingMembers.method.name.l",
    "scenario": 10,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List all namespaces in the project.",
    "answer": "cpg.namespace.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show the number of functions in each namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all type declarations with their kind.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.kind)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify dependencies between namespaces.",
    "answer": "cpg.namespaceBlock.call.callee.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve include directives per file.",
    "answer": "cpg.file.preprocessorDirective.code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate all namespace blocks.",
    "answer": "cpg.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display the count of methods per namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get types and the number of methods in them.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List files belonging to each namespace.",
    "answer": "cpg.namespaceBlock.file.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions defined outside any namespace.",
    "answer": "cpg.method.where(_.namespace.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find all namespaces in the project.",
    "answer": "cpg.namespace.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify the number of functions in each namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all type declarations with their kind.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.kind)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate dependencies between namespaces.",
    "answer": "cpg.namespaceBlock.call.callee.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display include directives per file.",
    "answer": "cpg.file.preprocessorDirective.code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get all namespace blocks.",
    "answer": "cpg.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List the count of methods per namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show types and the number of methods in them.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find files belonging to each namespace.",
    "answer": "cpg.namespaceBlock.file.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions defined outside any namespace.",
    "answer": "cpg.method.where(_.namespace.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve all namespaces in the project.",
    "answer": "cpg.namespace.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate the number of functions in each namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all type declarations with their kind.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.kind)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get dependencies between namespaces.",
    "answer": "cpg.namespaceBlock.call.callee.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List include directives per file.",
    "answer": "cpg.file.preprocessorDirective.code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show all namespace blocks.",
    "answer": "cpg.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find the count of methods per namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify types and the number of methods in them.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve files belonging to each namespace.",
    "answer": "cpg.namespaceBlock.file.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions defined outside any namespace.",
    "answer": "cpg.method.where(_.namespace.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display all namespaces in the project.",
    "answer": "cpg.namespace.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get the number of functions in each namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List all type declarations with their kind.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.kind)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show dependencies between namespaces.",
    "answer": "cpg.namespaceBlock.call.callee.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find include directives per file.",
    "answer": "cpg.file.preprocessorDirective.code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify all namespace blocks.",
    "answer": "cpg.namespaceBlock.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve the count of methods per namespace.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate types and the number of methods in them.",
    "answer": "cpg.typeDecl.map(t => (t.name, t.method.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display files belonging to each namespace.",
    "answer": "cpg.namespaceBlock.file.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions defined outside any namespace.",
    "answer": "cpg.method.where(_.namespace.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List modules with circular dependencies.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify parser functions that allocate memory using palloc.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").call.name(\"palloc\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find namespaces with high fan-in and fan-out.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.caller.size, n.method.callee.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify type declarations unused by other modules.",
    "answer": "cpg.typeDecl.where(_.method.referencingMembers.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions crossing namespace boundaries.",
    "answer": "cpg.method.where(_.callee.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate files referencing types in other namespaces.",
    "answer": "cpg.file.where(_.typeRef.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display namespaces with few types but many functions.",
    "answer": "cpg.namespace.where(_.typeDecl.size < 2 && _.method.size > 10).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List calls to ereport with FATAL severity in the codebase.",
    "answer": "cpg.call(\"ereport\").where(_.argument.code.matches(\".*FATAL.*\")).caller.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions in nodes implementation that manipulate List structures.",
    "answer": "cpg.file.name(\"src/backend/nodes/.*\").call.name(\"lfirst|lnext|lcons|lappend|list_concat|list_length|list_nth\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show modules with circular dependencies.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show dependencies from parser modules to planner modules.",
    "answer": "cpg.file.name(\"src/backend/parser/.*\").call.callee.file.name(\"src/backend/optimizer/.*\").l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify namespaces with high fan-in and fan-out.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.caller.size, n.method.callee.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve type declarations unused by other modules.",
    "answer": "cpg.typeDecl.where(_.method.referencingMembers.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions crossing namespace boundaries.",
    "answer": "cpg.method.where(_.callee.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display files referencing types in other namespaces.",
    "answer": "cpg.file.where(_.typeRef.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get namespaces with few types but many functions.",
    "answer": "cpg.namespace.where(_.typeDecl.size < 2 && _.method.size > 10).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that increment the command counter.",
    "answer": "cpg.call.name(\"CommandCounterIncrement\").method.fullName.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that copy parse tree nodes in copyfuncs.c.",
    "answer": "cpg.file.name(\"src/backend/nodes/copyfuncs.c\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find modules with circular dependencies.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions in outfuncs.c that output node structures.",
    "answer": "cpg.file.name(\"src/backend/nodes/outfuncs.c\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve namespaces with high fan-in and fan-out.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.caller.size, n.method.callee.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate type declarations unused by other modules.",
    "answer": "cpg.typeDecl.where(_.method.referencingMembers.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions crossing namespace boundaries.",
    "answer": "cpg.method.where(_.callee.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get files referencing types in other namespaces.",
    "answer": "cpg.file.where(_.typeRef.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List namespaces with few types but many functions.",
    "answer": "cpg.namespace.where(_.typeDecl.size < 2 && _.method.size > 10).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find executor functions calling heap_update or heap_delete.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").call.name(\"heap_update|heap_delete\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify access method functions calling XLogInsert.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").call.name(\"XLogInsert\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify modules with circular dependencies.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List replication functions in the codebase.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate namespaces with high fan-in and fan-out.",
    "answer": "cpg.namespace.map(n => (n.name, n.method.caller.size, n.method.callee.size)).l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display type declarations unused by other modules.",
    "answer": "cpg.typeDecl.where(_.method.referencingMembers.isEmpty).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions crossing namespace boundaries.",
    "answer": "cpg.method.where(_.callee.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List files referencing types in other namespaces.",
    "answer": "cpg.file.where(_.typeRef.namespace != _.namespace).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show namespaces with few types but many functions.",
    "answer": "cpg.namespace.where(_.typeDecl.size < 2 && _.method.size > 10).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions that switch memory context with MemoryContextSwitchTo.",
    "answer": "cpg.call.name(\"MemoryContextSwitchTo\").method.fullName.l",
    "scenario": 11,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Trace data flow from raw_parser to heap_insert.",
    "answer": "cpg.call.name(\"heap_insert\").argument.reachableBy(cpg.call.name(\"raw_parser|InputFunctionCall\")).l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show cyclic dependencies indicating architectural decay.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify loops containing heap_update or heap_delete calls.",
    "answer": "cpg.controlStructure.loopType.astChildren.containsCall.where(_.call.name(\"heap_update|heap_delete\")).method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions that switch memory context and then allocate memory with palloc.",
    "answer": "cpg.call.name(\"MemoryContextSwitchTo\").caller.call.name(\"palloc\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List replication functions that call LogicalDecoding API and XLogInsert.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").call.name(\"LogicalDecoding.*\").caller.call.name(\"XLogInsert\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify calls from access methods to storage manager modules.",
    "answer": "cpg.file.name(\"src/backend/access/.*\").call.callee.file.name(\"src/backend/storage/.*\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display cyclic dependencies indicating architectural decay.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions calling CommandCounterIncrement and then heap_update.",
    "answer": "cpg.call.name(\"CommandCounterIncrement\").caller.call.name(\"heap_update\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions allocating memory with palloc and copying using memcpy.",
    "answer": "cpg.call.name(\"palloc\").caller.call.name(\"memcpy\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions calling planner after raw_parser.",
    "answer": "cpg.call.name(\"planner\").argument.reachableBy(cpg.call.name(\"raw_parser\")).l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions in nodes module using list_concat followed by lappend.",
    "answer": "cpg.call.name(\"list_concat\").caller.call.name(\"lappend\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify cyclic dependencies indicating architectural decay.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions creating heap tuples and inserting them.",
    "answer": "cpg.call.name(\"heap_form_tuple\").caller.call.name(\"heap_insert\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Locate functions registering background workers and emitting errors.",
    "answer": "cpg.call.name(\"RegisterBackgroundWorker\").caller.call.name(\"ereport\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions in storage modules calling smgrwrite or smgrimmedsync.",
    "answer": "cpg.file.name(\"src/backend/storage/.*\").call.name(\"smgrwrite|smgrimmedsync\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify executor functions making recursive ExecProcNode calls.",
    "answer": "cpg.file.name(\"src/backend/executor/.*\").call.name(\"ExecProcNode\").caller.call.name(\"ExecProcNode\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List cyclic dependencies indicating architectural decay.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions implementing hash join by creating hash table and join.",
    "answer": "cpg.call.name(\"ExecHashTableCreate\").caller.call.name(\"ExecHashJoin\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions using XLogInsert for commit and logical records.",
    "answer": "cpg.call.name(\"XLogInsert\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions calling ereport with PANIC severity followed by AbortTransaction.",
    "answer": "cpg.call(\"ereport\").where(_.argument.code.matches(\".*PANIC.*\")).caller.call.name(\"AbortTransaction\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify calls from replication to executor modules.",
    "answer": "cpg.file.name(\"src/backend/replication/.*\").call.callee.file.name(\"src/backend/executor/.*\").code.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate cyclic dependencies indicating architectural decay.",
    "answer": "cpg.namespaceBlock.where(_.call.callee.namespaceBlock == _.namespaceBlock).name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Trace data flow from heap_update to XLogInsert operations.",
    "answer": "cpg.call.name(\"XLogInsert\").argument.reachableBy(cpg.call.name(\"heap_update|heap_delete\")).l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions that use NodeTag enums in switch statements.",
    "answer": "cpg.switchBlock.condition.astChildren.code.matches(\".*NodeTag.*\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions that call MemoryContextSwitchTo and ereport.",
    "answer": "cpg.call.name(\"MemoryContextSwitchTo\").caller.call.name(\"ereport\").method.name.l",
    "scenario": 11,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions with TODO or FIXME comments.",
    "answer": "cpg.comment.code(\".*TODO|FIXME.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show methods with long parameter lists.",
    "answer": "cpg.method.where(_.parameter.size > 5).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find files and their number of comments.",
    "answer": "cpg.file.map(f => (f.name, f.comment.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify nested control structures per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions with complex expressions.",
    "answer": "cpg.call.name(\"<operator>.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions with many locals.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display methods with no comments.",
    "answer": "cpg.method.where(_.comment.isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get small functions (less than ten lines).",
    "answer": "cpg.method.where(_.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List files with large numbers of lines.",
    "answer": "cpg.file.where(_.lineNumberEnd - _.lineNumberStart > 500).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions containing magic numbers.",
    "answer": "cpg.literal.code(\"\\d+\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions with TODO or FIXME comments.",
    "answer": "cpg.comment.code(\".*TODO|FIXME.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify methods with long parameter lists.",
    "answer": "cpg.method.where(_.parameter.size > 5).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve files and their number of comments.",
    "answer": "cpg.file.map(f => (f.name, f.comment.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate nested control structures per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions with complex expressions.",
    "answer": "cpg.call.name(\"<operator>.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions with many locals.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List methods with no comments.",
    "answer": "cpg.method.where(_.comment.isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show small functions (less than ten lines).",
    "answer": "cpg.method.where(_.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find files with large numbers of lines.",
    "answer": "cpg.file.where(_.lineNumberEnd - _.lineNumberStart > 500).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions containing magic numbers.",
    "answer": "cpg.literal.code(\"\\d+\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions with TODO or FIXME comments.",
    "answer": "cpg.comment.code(\".*TODO|FIXME.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate methods with long parameter lists.",
    "answer": "cpg.method.where(_.parameter.size > 5).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display files and their number of comments.",
    "answer": "cpg.file.map(f => (f.name, f.comment.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get nested control structures per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions with complex expressions.",
    "answer": "cpg.call.name(\"<operator>.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions with many locals.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find methods with no comments.",
    "answer": "cpg.method.where(_.comment.isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify small functions (less than ten lines).",
    "answer": "cpg.method.where(_.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve files with large numbers of lines.",
    "answer": "cpg.file.where(_.lineNumberEnd - _.lineNumberStart > 500).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions containing magic numbers.",
    "answer": "cpg.literal.code(\"\\d+\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions with TODO or FIXME comments.",
    "answer": "cpg.comment.code(\".*TODO|FIXME.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get methods with long parameter lists.",
    "answer": "cpg.method.where(_.parameter.size > 5).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List files and their number of comments.",
    "answer": "cpg.file.map(f => (f.name, f.comment.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show nested control structures per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions with complex expressions.",
    "answer": "cpg.call.name(\"<operator>.*\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions with many locals.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve methods with no comments.",
    "answer": "cpg.method.where(_.comment.isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate small functions (less than ten lines).",
    "answer": "cpg.method.where(_.lineNumberEnd - _.lineNumberStart < 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display files with large numbers of lines.",
    "answer": "cpg.file.where(_.lineNumberEnd - _.lineNumberStart > 500).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions containing magic numbers.",
    "answer": "cpg.literal.code(\"\\d+\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List modules with high average cyclomatic complexity.",
    "answer": "cpg.namespace.map(ns => (ns.name, ns.method.cyclomaticComplexity.avg)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with deep call chains.",
    "answer": "cpg.method.where(_.callee.callee.callee.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find number of exception handling statements per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.where(_.code.contains(\"try\")).size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with high fan-out.",
    "answer": "cpg.method.where(_.callee.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve methods with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with high fan-in.",
    "answer": "cpg.method.where(_.caller.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with a large number of literals.",
    "answer": "cpg.method.where(_.literal.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get modules with increasing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with nested ternary operators.",
    "answer": "cpg.call.name(\"<operator>.conditional\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show modules with high average cyclomatic complexity.",
    "answer": "cpg.namespace.map(ns => (ns.name, ns.method.cyclomaticComplexity.avg)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with deep call chains.",
    "answer": "cpg.method.where(_.callee.callee.callee.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify number of exception handling statements per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.where(_.code.contains(\"try\")).size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with high fan-out.",
    "answer": "cpg.method.where(_.callee.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate methods with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with high fan-in.",
    "answer": "cpg.method.where(_.caller.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions with a large number of literals.",
    "answer": "cpg.method.where(_.literal.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List modules with increasing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with nested ternary operators.",
    "answer": "cpg.call.name(\"<operator>.conditional\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find modules with high average cyclomatic complexity.",
    "answer": "cpg.namespace.map(ns => (ns.name, ns.method.cyclomaticComplexity.avg)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions with deep call chains.",
    "answer": "cpg.method.where(_.callee.callee.callee.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve number of exception handling statements per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.where(_.code.contains(\"try\")).size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions with high fan-out.",
    "answer": "cpg.method.where(_.callee.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display methods with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions with high fan-in.",
    "answer": "cpg.method.where(_.caller.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with a large number of literals.",
    "answer": "cpg.method.where(_.literal.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show modules with increasing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions with nested ternary operators.",
    "answer": "cpg.call.name(\"<operator>.conditional\").method.name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify modules with high average cyclomatic complexity.",
    "answer": "cpg.namespace.map(ns => (ns.name, ns.method.cyclomaticComplexity.avg)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions with deep call chains.",
    "answer": "cpg.method.where(_.callee.callee.callee.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate number of exception handling statements per method.",
    "answer": "cpg.method.map(m => (m.name, m.controlStructure.where(_.code.contains(\"try\")).size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions with high fan-out.",
    "answer": "cpg.method.where(_.callee.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get methods with many local variables.",
    "answer": "cpg.method.where(_.local.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions with high fan-in.",
    "answer": "cpg.method.where(_.caller.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions with a large number of literals.",
    "answer": "cpg.method.where(_.literal.size > 10).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find modules with increasing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List technical debt index based on complexity and size.",
    "answer": "cpg.method.map(m => (m.name, m.cyclomaticComplexity + m.local.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions with high coupling and low cohesion.",
    "answer": "cpg.method.where(_.callee.size > 10 && _.local.size < 2).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find modules accruing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify duplicated logic across methods.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve distribution of code complexity across the project.",
    "answer": "cpg.method.map(_.cyclomaticComplexity).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate technical debt index based on complexity and size.",
    "answer": "cpg.method.map(m => (m.name, m.cyclomaticComplexity + m.local.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions with high coupling and low cohesion.",
    "answer": "cpg.method.where(_.callee.size > 10 && _.local.size < 2).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get modules accruing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List duplicated logic across methods.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show distribution of code complexity across the project.",
    "answer": "cpg.method.map(_.cyclomaticComplexity).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find technical debt index based on complexity and size.",
    "answer": "cpg.method.map(m => (m.name, m.cyclomaticComplexity + m.local.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions with high coupling and low cohesion.",
    "answer": "cpg.method.where(_.callee.size > 10 && _.local.size < 2).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve modules accruing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate duplicated logic across methods.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display distribution of code complexity across the project.",
    "answer": "cpg.method.map(_.cyclomaticComplexity).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get technical debt index based on complexity and size.",
    "answer": "cpg.method.map(m => (m.name, m.cyclomaticComplexity + m.local.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions with high coupling and low cohesion.",
    "answer": "cpg.method.where(_.callee.size > 10 && _.local.size < 2).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show modules accruing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find duplicated logic across methods.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify distribution of code complexity across the project.",
    "answer": "cpg.method.map(_.cyclomaticComplexity).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve technical debt index based on complexity and size.",
    "answer": "cpg.method.map(m => (m.name, m.cyclomaticComplexity + m.local.size)).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions with high coupling and low cohesion.",
    "answer": "cpg.method.where(_.callee.size > 10 && _.local.size < 2).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display modules accruing debt due to changes without tests.",
    "answer": "cpg.file.where(_.tagList.contains(\"recent-change\") && _.method.caller.file.name(\"src/test/.*\").isEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get duplicated logic across methods.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List distribution of code complexity across the project.",
    "answer": "cpg.method.map(_.cyclomaticComplexity).l",
    "scenario": 12,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List calls matching 'oldFunction'.",
    "answer": "cpg.call.name(\"oldFunction\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show locations to replace deprecated API 'oldFunc'.",
    "answer": "cpg.call.name(\"oldFunc\").location.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find instantiations of a specific struct.",
    "answer": "cpg.call.name(\"<operator>.assignment\").where(_.argument.code.contains(\"structType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify usages of a macro.",
    "answer": "cpg.call.name(\"MACRO_NAME\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve casts to a specific type.",
    "answer": "cpg.call.name(\"<operator>.cast\").where(_.argument.typeFullName(\"myType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to deprecated functions.",
    "answer": "cpg.call.where(_.callee.isDeprecated).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that can be simplified.",
    "answer": "cpg.method.where(_.call.size < 2).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get occurrences of repetitive code patterns.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that return void but could return a value.",
    "answer": "cpg.method.where(_.methodReturn.typeFullName == \"void\").name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show uses of the 'goto' statement.",
    "answer": "cpg.controlStructure.code(\"goto .*\").l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find calls matching 'oldFunction'.",
    "answer": "cpg.call.name(\"oldFunction\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify locations to replace deprecated API 'oldFunc'.",
    "answer": "cpg.call.name(\"oldFunc\").location.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve instantiations of a specific struct.",
    "answer": "cpg.call.name(\"<operator>.assignment\").where(_.argument.code.contains(\"structType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate usages of a macro.",
    "answer": "cpg.call.name(\"MACRO_NAME\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display casts to a specific type.",
    "answer": "cpg.call.name(\"<operator>.cast\").where(_.argument.typeFullName(\"myType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to deprecated functions.",
    "answer": "cpg.call.where(_.callee.isDeprecated).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that can be simplified.",
    "answer": "cpg.method.where(_.call.size < 2).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show occurrences of repetitive code patterns.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that return void but could return a value.",
    "answer": "cpg.method.where(_.methodReturn.typeFullName == \"void\").name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify uses of the 'goto' statement.",
    "answer": "cpg.controlStructure.code(\"goto .*\").l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve calls matching 'oldFunction'.",
    "answer": "cpg.call.name(\"oldFunction\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate locations to replace deprecated API 'oldFunc'.",
    "answer": "cpg.call.name(\"oldFunc\").location.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display instantiations of a specific struct.",
    "answer": "cpg.call.name(\"<operator>.assignment\").where(_.argument.code.contains(\"structType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get usages of a macro.",
    "answer": "cpg.call.name(\"MACRO_NAME\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List casts to a specific type.",
    "answer": "cpg.call.name(\"<operator>.cast\").where(_.argument.typeFullName(\"myType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to deprecated functions.",
    "answer": "cpg.call.where(_.callee.isDeprecated).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that can be simplified.",
    "answer": "cpg.method.where(_.call.size < 2).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify occurrences of repetitive code patterns.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that return void but could return a value.",
    "answer": "cpg.method.where(_.methodReturn.typeFullName == \"void\").name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate uses of the 'goto' statement.",
    "answer": "cpg.controlStructure.code(\"goto .*\").l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display calls matching 'oldFunction'.",
    "answer": "cpg.call.name(\"oldFunction\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get locations to replace deprecated API 'oldFunc'.",
    "answer": "cpg.call.name(\"oldFunc\").location.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List instantiations of a specific struct.",
    "answer": "cpg.call.name(\"<operator>.assignment\").where(_.argument.code.contains(\"structType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show usages of a macro.",
    "answer": "cpg.call.name(\"MACRO_NAME\").code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find casts to a specific type.",
    "answer": "cpg.call.name(\"<operator>.cast\").where(_.argument.typeFullName(\"myType\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to deprecated functions.",
    "answer": "cpg.call.where(_.callee.isDeprecated).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that can be simplified.",
    "answer": "cpg.method.where(_.call.size < 2).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate occurrences of repetitive code patterns.",
    "answer": "cpg.method.where(_.isDuplicateOf.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that return void but could return a value.",
    "answer": "cpg.method.where(_.methodReturn.typeFullName == \"void\").name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get uses of the 'goto' statement.",
    "answer": "cpg.controlStructure.code(\"goto .*\").l",
    "scenario": 13,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that always call another function suitable for inlining.",
    "answer": "cpg.method.where(_.callee.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show places where a global variable could be passed as an argument.",
    "answer": "cpg.method.where(_.call.name(\"globalVar\").nonEmpty && _.parameter.name(\"globalVar\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find loops that could be refactored into for-each loops.",
    "answer": "cpg.controlStructure.loopType.where(_.code.matches(\"for\\(.*;.*;.*\\)\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions that only read struct members.",
    "answer": "cpg.method.where(_.call.name(\"<operator>.fieldAccess\").size > 0 && _.call.name(\"<operator>.assignment\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve switch statements with many cases.",
    "answer": "cpg.controlStructure.type(\"SWITCH\").where(_.case.size > 3).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that could be converted to templates.",
    "answer": "cpg.method.where(_.typeParameter.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that return error codes manually.",
    "answer": "cpg.method.where(_.call.name(\"return\").nonEmpty && _.call.name(\"throw\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that could be replaced by standard library functions.",
    "answer": "cpg.method.where(_.call.name(\"memcpy\").isEmpty && _.call.name(\"copy\").nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List methods that wrap a single API call.",
    "answer": "cpg.method.where(_.call.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that always call another function suitable for inlining.",
    "answer": "cpg.method.where(_.callee.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find places where a global variable could be passed as an argument.",
    "answer": "cpg.method.where(_.call.name(\"globalVar\").nonEmpty && _.parameter.name(\"globalVar\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify loops that could be refactored into for-each loops.",
    "answer": "cpg.controlStructure.loopType.where(_.code.matches(\"for\\(.*;.*;.*\\)\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions that only read struct members.",
    "answer": "cpg.method.where(_.call.name(\"<operator>.fieldAccess\").size > 0 && _.call.name(\"<operator>.assignment\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate switch statements with many cases.",
    "answer": "cpg.controlStructure.type(\"SWITCH\").where(_.case.size > 3).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that could be converted to templates.",
    "answer": "cpg.method.where(_.typeParameter.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that return error codes manually.",
    "answer": "cpg.method.where(_.call.name(\"return\").nonEmpty && _.call.name(\"throw\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that could be replaced by standard library functions.",
    "answer": "cpg.method.where(_.call.name(\"memcpy\").isEmpty && _.call.name(\"copy\").nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show methods that wrap a single API call.",
    "answer": "cpg.method.where(_.call.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions that always call another function suitable for inlining.",
    "answer": "cpg.method.where(_.callee.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify places where a global variable could be passed as an argument.",
    "answer": "cpg.method.where(_.call.name(\"globalVar\").nonEmpty && _.parameter.name(\"globalVar\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve loops that could be refactored into for-each loops.",
    "answer": "cpg.controlStructure.loopType.where(_.code.matches(\"for\\(.*;.*;.*\\)\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that only read struct members.",
    "answer": "cpg.method.where(_.call.name(\"<operator>.fieldAccess\").size > 0 && _.call.name(\"<operator>.assignment\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display switch statements with many cases.",
    "answer": "cpg.controlStructure.type(\"SWITCH\").where(_.case.size > 3).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that could be converted to templates.",
    "answer": "cpg.method.where(_.typeParameter.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that return error codes manually.",
    "answer": "cpg.method.where(_.call.name(\"return\").nonEmpty && _.call.name(\"throw\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that could be replaced by standard library functions.",
    "answer": "cpg.method.where(_.call.name(\"memcpy\").isEmpty && _.call.name(\"copy\").nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find methods that wrap a single API call.",
    "answer": "cpg.method.where(_.call.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions that always call another function suitable for inlining.",
    "answer": "cpg.method.where(_.callee.size == 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve places where a global variable could be passed as an argument.",
    "answer": "cpg.method.where(_.call.name(\"globalVar\").nonEmpty && _.parameter.name(\"globalVar\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate loops that could be refactored into for-each loops.",
    "answer": "cpg.controlStructure.loopType.where(_.code.matches(\"for\\(.*;.*;.*\\)\")).code.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that only read struct members.",
    "answer": "cpg.method.where(_.call.name(\"<operator>.fieldAccess\").size > 0 && _.call.name(\"<operator>.assignment\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get switch statements with many cases.",
    "answer": "cpg.controlStructure.type(\"SWITCH\").where(_.case.size > 3).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that could be converted to templates.",
    "answer": "cpg.method.where(_.typeParameter.nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions that return error codes manually.",
    "answer": "cpg.method.where(_.call.name(\"return\").nonEmpty && _.call.name(\"throw\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions that could be replaced by standard library functions.",
    "answer": "cpg.method.where(_.call.name(\"memcpy\").isEmpty && _.call.name(\"copy\").nonEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions implementing logging and business logic together.",
    "answer": "cpg.method.where(_.call.name(\"log\").size > 0 && _.call.name(\"business\").size > 0).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions similar enough to be merged.",
    "answer": "cpg.method.where(_.similarityScore > 0.8).map(m => (m.name, m.similarMethods.name)).l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find data flow patterns suitable for helper functions.",
    "answer": "cpg.call.where(_.argument.reachableBy(cpg.call.name(\"validate\")).nonEmpty).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify repeated initialization code across functions.",
    "answer": "cpg.method.where(_.code.startsWith(\"init\") && _.caller.size > 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions handling errors similarly.",
    "answer": "cpg.method.where(_.call.name(\"perror|exit\").size > 0 && _.call.name(\"cleanup\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions implementing logging and business logic together.",
    "answer": "cpg.method.where(_.call.name(\"log\").size > 0 && _.call.name(\"business\").size > 0).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions similar enough to be merged.",
    "answer": "cpg.method.where(_.similarityScore > 0.8).map(m => (m.name, m.similarMethods.name)).l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get data flow patterns suitable for helper functions.",
    "answer": "cpg.call.where(_.argument.reachableBy(cpg.call.name(\"validate\")).nonEmpty).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List repeated initialization code across functions.",
    "answer": "cpg.method.where(_.code.startsWith(\"init\") && _.caller.size > 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show functions handling errors similarly.",
    "answer": "cpg.method.where(_.call.name(\"perror|exit\").size > 0 && _.call.name(\"cleanup\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find functions implementing logging and business logic together.",
    "answer": "cpg.method.where(_.call.name(\"log\").size > 0 && _.call.name(\"business\").size > 0).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions similar enough to be merged.",
    "answer": "cpg.method.where(_.similarityScore > 0.8).map(m => (m.name, m.similarMethods.name)).l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve data flow patterns suitable for helper functions.",
    "answer": "cpg.call.where(_.argument.reachableBy(cpg.call.name(\"validate\")).nonEmpty).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate repeated initialization code across functions.",
    "answer": "cpg.method.where(_.code.startsWith(\"init\") && _.caller.size > 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display functions handling errors similarly.",
    "answer": "cpg.method.where(_.call.name(\"perror|exit\").size > 0 && _.call.name(\"cleanup\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get functions implementing logging and business logic together.",
    "answer": "cpg.method.where(_.call.name(\"log\").size > 0 && _.call.name(\"business\").size > 0).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions similar enough to be merged.",
    "answer": "cpg.method.where(_.similarityScore > 0.8).map(m => (m.name, m.similarMethods.name)).l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show data flow patterns suitable for helper functions.",
    "answer": "cpg.call.where(_.argument.reachableBy(cpg.call.name(\"validate\")).nonEmpty).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find repeated initialization code across functions.",
    "answer": "cpg.method.where(_.code.startsWith(\"init\") && _.caller.size > 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify functions handling errors similarly.",
    "answer": "cpg.method.where(_.call.name(\"perror|exit\").size > 0 && _.call.name(\"cleanup\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve functions implementing logging and business logic together.",
    "answer": "cpg.method.where(_.call.name(\"log\").size > 0 && _.call.name(\"business\").size > 0).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate functions similar enough to be merged.",
    "answer": "cpg.method.where(_.similarityScore > 0.8).map(m => (m.name, m.similarMethods.name)).l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display data flow patterns suitable for helper functions.",
    "answer": "cpg.call.where(_.argument.reachableBy(cpg.call.name(\"validate\")).nonEmpty).method.name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get repeated initialization code across functions.",
    "answer": "cpg.method.where(_.code.startsWith(\"init\") && _.caller.size > 1).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions handling errors similarly.",
    "answer": "cpg.method.where(_.call.name(\"perror|exit\").size > 0 && _.call.name(\"cleanup\").isEmpty).name.l",
    "scenario": 13,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List functions that write to log files.",
    "answer": "cpg.call.name(\"fprintf|log|syslog\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show system calls executed in the code.",
    "answer": "cpg.call.name(\"exec|system|fork\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find network calls to internal addresses.",
    "answer": "cpg.literal.code(\"192.168.|10.0.\").l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions handling user authentication.",
    "answer": "cpg.call.name(\"authenticate|login\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions reading environment variables.",
    "answer": "cpg.call.name(\"getenv\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate calls to 'chmod'.",
    "answer": "cpg.call.name(\"chmod\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that open network sockets.",
    "answer": "cpg.call.name(\"socket\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get reads from /proc.",
    "answer": "cpg.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that read user tokens.",
    "answer": "cpg.identifier.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions that handle login tokens.",
    "answer": "cpg.call.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that write to log files.",
    "answer": "cpg.call.name(\"fprintf|log|syslog\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify system calls executed in the code.",
    "answer": "cpg.call.name(\"exec|system|fork\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve network calls to internal addresses.",
    "answer": "cpg.literal.code(\"192.168.|10.0.\").l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions handling user authentication.",
    "answer": "cpg.call.name(\"authenticate|login\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions reading environment variables.",
    "answer": "cpg.call.name(\"getenv\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get calls to 'chmod'.",
    "answer": "cpg.call.name(\"chmod\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions that open network sockets.",
    "answer": "cpg.call.name(\"socket\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show reads from /proc.",
    "answer": "cpg.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that read user tokens.",
    "answer": "cpg.identifier.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify functions that handle login tokens.",
    "answer": "cpg.call.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that write to log files.",
    "answer": "cpg.call.name(\"fprintf|log|syslog\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate system calls executed in the code.",
    "answer": "cpg.call.name(\"exec|system|fork\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display network calls to internal addresses.",
    "answer": "cpg.literal.code(\"192.168.|10.0.\").l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions handling user authentication.",
    "answer": "cpg.call.name(\"authenticate|login\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List functions reading environment variables.",
    "answer": "cpg.call.name(\"getenv\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show calls to 'chmod'.",
    "answer": "cpg.call.name(\"chmod\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions that open network sockets.",
    "answer": "cpg.call.name(\"socket\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify reads from /proc.",
    "answer": "cpg.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that read user tokens.",
    "answer": "cpg.identifier.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate functions that handle login tokens.",
    "answer": "cpg.call.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that write to log files.",
    "answer": "cpg.call.name(\"fprintf|log|syslog\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get system calls executed in the code.",
    "answer": "cpg.call.name(\"exec|system|fork\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List network calls to internal addresses.",
    "answer": "cpg.literal.code(\"192.168.|10.0.\").l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Show functions handling user authentication.",
    "answer": "cpg.call.name(\"authenticate|login\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Find functions reading environment variables.",
    "answer": "cpg.call.name(\"getenv\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Identify calls to 'chmod'.",
    "answer": "cpg.call.name(\"chmod\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Retrieve functions that open network sockets.",
    "answer": "cpg.call.name(\"socket\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Enumerate reads from /proc.",
    "answer": "cpg.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Display functions that read user tokens.",
    "answer": "cpg.identifier.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "Get functions that handle login tokens.",
    "answer": "cpg.call.name(\"token\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "low"
    }
  },
  {
    "question": "List input handling without sanitization.",
    "answer": "cpg.call.name(\"scanf|gets|fgets\").whereNot(_.caller.call.name(\"sanitize|validate\").nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions writing sensitive data to external sockets.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|token\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find credential storage to disk.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify unencrypted network transmission of sensitive data.",
    "answer": "cpg.call.name(\"send\").where(_.argument.code.matches(\".*HTTP/1.0.*\") && _.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions that log stack traces.",
    "answer": "cpg.call.name(\"backtrace|stackTrace\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that read from /proc and write to logs.",
    "answer": "cpg.method.where(_.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).nonEmpty && _.call.name(\"log\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions performing privilege checks.",
    "answer": "cpg.call.name(\"check_permission|authz\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions storing secrets in memory.",
    "answer": "cpg.method.where(_.local.name(\"secret\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions reading configuration files for security settings.",
    "answer": "cpg.call.name(\"FileRead|fopen\").where(_.argument.code.contains(\"config\")).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show input handling without sanitization.",
    "answer": "cpg.call.name(\"scanf|gets|fgets\").whereNot(_.caller.call.name(\"sanitize|validate\").nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions writing sensitive data to external sockets.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|token\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify credential storage to disk.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve unencrypted network transmission of sensitive data.",
    "answer": "cpg.call.name(\"send\").where(_.argument.code.matches(\".*HTTP/1.0.*\") && _.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate functions that log stack traces.",
    "answer": "cpg.call.name(\"backtrace|stackTrace\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that read from /proc and write to logs.",
    "answer": "cpg.method.where(_.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).nonEmpty && _.call.name(\"log\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions performing privilege checks.",
    "answer": "cpg.call.name(\"check_permission|authz\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions storing secrets in memory.",
    "answer": "cpg.method.where(_.local.name(\"secret\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions reading configuration files for security settings.",
    "answer": "cpg.call.name(\"FileRead|fopen\").where(_.argument.code.contains(\"config\")).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find input handling without sanitization.",
    "answer": "cpg.call.name(\"scanf|gets|fgets\").whereNot(_.caller.call.name(\"sanitize|validate\").nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify functions writing sensitive data to external sockets.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|token\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve credential storage to disk.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate unencrypted network transmission of sensitive data.",
    "answer": "cpg.call.name(\"send\").where(_.argument.code.matches(\".*HTTP/1.0.*\") && _.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display functions that log stack traces.",
    "answer": "cpg.call.name(\"backtrace|stackTrace\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that read from /proc and write to logs.",
    "answer": "cpg.method.where(_.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).nonEmpty && _.call.name(\"log\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions performing privilege checks.",
    "answer": "cpg.call.name(\"check_permission|authz\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions storing secrets in memory.",
    "answer": "cpg.method.where(_.local.name(\"secret\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions reading configuration files for security settings.",
    "answer": "cpg.call.name(\"FileRead|fopen\").where(_.argument.code.contains(\"config\")).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Identify input handling without sanitization.",
    "answer": "cpg.call.name(\"scanf|gets|fgets\").whereNot(_.caller.call.name(\"sanitize|validate\").nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Retrieve functions writing sensitive data to external sockets.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|token\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Enumerate credential storage to disk.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.identifier.name(\"password|secret\")).nonEmpty).method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Display unencrypted network transmission of sensitive data.",
    "answer": "cpg.call.name(\"send\").where(_.argument.code.matches(\".*HTTP/1.0.*\") && _.argument.reachableBy(cpg.identifier.name(\"password\")).nonEmpty).code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Get functions that log stack traces.",
    "answer": "cpg.call.name(\"backtrace|stackTrace\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List functions that read from /proc and write to logs.",
    "answer": "cpg.method.where(_.call.name(\"open\").where(_.argument.code.contains(\"/proc\")).nonEmpty && _.call.name(\"log\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Show functions performing privilege checks.",
    "answer": "cpg.call.name(\"check_permission|authz\").method.name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "Find functions storing secrets in memory.",
    "answer": "cpg.method.where(_.local.name(\"secret\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "medium"
    }
  },
  {
    "question": "List attacker-controlled data reaching system calls.",
    "answer": "cpg.call.name(\"exec|system\").where(_.argument.reachableBy(cpg.call.name(\"recv|read|gets\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show secrets sent to remote endpoints.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"secret|key\")).nonEmpty).locations.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find authentication functions using insecure random tokens.",
    "answer": "cpg.method.where(_.call.name(\"authenticate|login\").nonEmpty && _.call.name(\"random|pg_lrand48\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify flows from environment variables to file writes.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.call.name(\"getenv\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve execution of base64 decoded user input.",
    "answer": "cpg.call.name(\"base64_decode\").where(_.argument.reachableBy(cpg.call.name(\"recv|read\")).nonEmpty).caller.call.name(\"exec\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate attacker-controlled data reaching system calls.",
    "answer": "cpg.call.name(\"exec|system\").where(_.argument.reachableBy(cpg.call.name(\"recv|read|gets\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display secrets sent to remote endpoints.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"secret|key\")).nonEmpty).locations.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get authentication functions using insecure random tokens.",
    "answer": "cpg.method.where(_.call.name(\"authenticate|login\").nonEmpty && _.call.name(\"random|pg_lrand48\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List flows from environment variables to file writes.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.call.name(\"getenv\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show execution of base64 decoded user input.",
    "answer": "cpg.call.name(\"base64_decode\").where(_.argument.reachableBy(cpg.call.name(\"recv|read\")).nonEmpty).caller.call.name(\"exec\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find attacker-controlled data reaching system calls.",
    "answer": "cpg.call.name(\"exec|system\").where(_.argument.reachableBy(cpg.call.name(\"recv|read|gets\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify secrets sent to remote endpoints.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"secret|key\")).nonEmpty).locations.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve authentication functions using insecure random tokens.",
    "answer": "cpg.method.where(_.call.name(\"authenticate|login\").nonEmpty && _.call.name(\"random|pg_lrand48\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate flows from environment variables to file writes.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.call.name(\"getenv\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display execution of base64 decoded user input.",
    "answer": "cpg.call.name(\"base64_decode\").where(_.argument.reachableBy(cpg.call.name(\"recv|read\")).nonEmpty).caller.call.name(\"exec\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get attacker-controlled data reaching system calls.",
    "answer": "cpg.call.name(\"exec|system\").where(_.argument.reachableBy(cpg.call.name(\"recv|read|gets\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List secrets sent to remote endpoints.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"secret|key\")).nonEmpty).locations.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Show authentication functions using insecure random tokens.",
    "answer": "cpg.method.where(_.call.name(\"authenticate|login\").nonEmpty && _.call.name(\"random|pg_lrand48\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Find flows from environment variables to file writes.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.call.name(\"getenv\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Identify execution of base64 decoded user input.",
    "answer": "cpg.call.name(\"base64_decode\").where(_.argument.reachableBy(cpg.call.name(\"recv|read\")).nonEmpty).caller.call.name(\"exec\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Retrieve attacker-controlled data reaching system calls.",
    "answer": "cpg.call.name(\"exec|system\").where(_.argument.reachableBy(cpg.call.name(\"recv|read|gets\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Enumerate secrets sent to remote endpoints.",
    "answer": "cpg.call.name(\"send|write\").where(_.argument.reachableBy(cpg.identifier.name(\"secret|key\")).nonEmpty).locations.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Display authentication functions using insecure random tokens.",
    "answer": "cpg.method.where(_.call.name(\"authenticate|login\").nonEmpty && _.call.name(\"random|pg_lrand48\").nonEmpty).name.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "Get flows from environment variables to file writes.",
    "answer": "cpg.call.name(\"FileWrite|fwrite|write\").where(_.argument.reachableBy(cpg.call.name(\"getenv\").argument)).l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  },
  {
    "question": "List execution of base64 decoded user input.",
    "answer": "cpg.call.name(\"base64_decode\").where(_.argument.reachableBy(cpg.call.name(\"recv|read\")).nonEmpty).caller.call.name(\"exec\").code.l",
    "scenario": 14,
    "metadata": {
      "complexity": "high"
    }
  }
]