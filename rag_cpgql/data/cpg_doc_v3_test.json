{
  "methods": [
    {
      "method_name": "brinhandler",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 246,
      "comment": "/*\n * BRIN handler function: return IndexAmRoutine with access method parameters\n * and callbacks.\n */",
      "description": "BRIN handler function: return IndexAmRoutine with access method parameters    and callbacks."
    },
    {
      "method_name": "initialize_brin_insertstate",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 305,
      "comment": "/*\n * Initialize a BrinInsertState to maintain state to be used across multiple\n * tuple inserts, within the same command.\n */",
      "description": "Initialize a BrinInsertState to maintain state to be used across multiple    tuple inserts, within the same command."
    },
    {
      "method_name": "brininsert",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 334,
      "comment": "/*\n * A tuple in the heap is being inserted.  To keep a brin index up to date,\n * we need to obtain the relevant index tuple and compare its stored values\n * with those of the new tuple.  If the tuple values are not consistent with\n * the summary tuple, we need to update the index tuple.\n *\n * If autosummarization is enabled, check if we need to summarize the previous\n * page range.\n *\n * If the range is not currently summarized (i.e. the revmap returns NULL for\n * it), there's nothing to do for this tuple.\n */",
      "description": "A tuple in the heap is being inserted."
    },
    {
      "method_name": "brininsertcleanup",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 502,
      "comment": "/*\n * Callback to clean up the BrinInsertState once all tuple inserts are done.\n */",
      "description": "Callback to clean up the BrinInsertState once all tuple inserts are done."
    },
    {
      "method_name": "brinbeginscan",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 529,
      "comment": "/*\n * Initialize state for a BRIN index scan.\n *\n * We read the metapage here to determine the pages-per-range number that this\n * index was built with.  Note that since this cannot be changed while we're\n * holding lock on index, it's not necessary to recompute it during brinrescan.\n */",
      "description": "Initialize state for a BRIN index scan."
    },
    {
      "method_name": "bringetbitmap",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 557,
      "comment": "/*\n * Execute the index scan.\n *\n * This works by reading index TIDs from the revmap, and obtaining the index\n * tuples pointed to by them; the summary values in the index tuples are\n * compared to the scan keys.  We return into the TID bitmap all the pages in\n * ranges corresponding to index tuples that match the scan keys.\n *\n * If a TID from the revmap is read as InvalidTID, we know that range is\n * unsummarized.  Pages in those ranges need to be returned regardless of scan\n * keys.\n */",
      "description": "Execute the index scan."
    },
    {
      "method_name": "brinrescan",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 947,
      "comment": "/*\n * Re-initialize state for a BRIN index scan\n */",
      "description": "Re-initialize state for a BRIN index scan"
    },
    {
      "method_name": "brinendscan",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 967,
      "comment": "/*\n * Close down a BRIN index scan\n */",
      "description": "Close down a BRIN index scan"
    },
    {
      "method_name": "brinbuildCallback",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 984,
      "comment": "/*\n * Per-heap-tuple callback for table_index_build_scan.\n *\n * Note we don't worry about the page range at the end of the table here; it is\n * present in the build state struct after we're called the last time, but not\n * inserted into the index.  Caller must ensure to do so, if appropriate.\n */",
      "description": "Per-heap-tuple callback for table_index_build_scan."
    },
    {
      "method_name": "brinbuildCallbackParallel",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 1035,
      "comment": "/*\n * Per-heap-tuple callback for table_index_build_scan with parallelism.\n *\n * A version of the callback used by parallel index builds. The main difference\n * is that instead of writing the BRIN tuples into the index, we write them\n * into a shared tuplesort, and leave the insertion up to the leader (which may\n * reorder them a bit etc.). The callback also does not generate empty ranges,\n * those will be added by the leader when merging results from workers.\n */",
      "description": "Per-heap-tuple callback for table_index_build_scan with parallelism."
    },
    {
      "method_name": "brinbuild",
      "file_path": "backend/access/brin/brin.c",
      "line_number": 1094,
      "comment": "/*\n * brinbuild() -- build a new BRIN index.\n */",
      "description": "brinbuild() -- build a new BRIN index."
    }
  ],
  "stats": {
    "total_method_docs": 11,
    "total_documentation_entries": 11
  }
}