[
  {
    "id": 1,
    "question": "What functions implement WAL logging?",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"function-purpose\").valueExact(\"wal-logging\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres52\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"brinbuild\",\n  \"brinbuildempty\",\n  \"_brin_begin_parallel\",\n  \"_brin_end_parallel\",\n  \"_brin_parallel_build_main\",\n  \"build_distances\",\n  \"brin_minmax_multi_distance_pg_lsn\",\n  \"brin_metapage_init\",\n  \"brin_start_evacuating_page\",\n  \"brin_initialize_empty_new_buffer\"\n)\r\n"
  },
  {
    "id": 2,
    "question": "Show me functions related to B-tree index splitting",
    "category": "architecture",
    "query": "cpg.file.where(_.tag.nameExact(\"arch-sublayer\").valueExact(\"btree-index\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres53\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\access\\nbtree\\nbtcompare.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtdedup.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtinsert.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtpage.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtree.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtsearch.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtsort.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtsplitloc.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtutils.c\"\"\",\n  \"\"\"backend\\access\\nbtree\\nbtvalidate.c\"\"\"\n)\r\n"
  },
  {
    "id": 3,
    "question": "Find security vulnerabilities in the code",
    "category": "security",
    "query": "cpg.call.where(_.tag.nameExact(\"security-risk\")).map(c => (c.name, c.file.name)).l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres54\u001b[0m: \u001b[32mList\u001b[0m[(\u001b[32mString\u001b[0m, \u001b[32mIterator\u001b[0m[\u001b[32mString\u001b[0m])] = List(\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator),\n  (\"memcpy\", non-empty iterator)\n)\r\n"
  },
  {
    "id": 4,
    "question": "What code implements the MERGE feature?",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"MERGE\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres55\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\"\"\"backend\\parser\\parse_merge.c\"\"\", \"\"\"include\\parser\\parse_merge.h\"\"\")\r\n"
  },
  {
    "id": 5,
    "question": "Show me JSONB functions",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"JSONB data type\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres56\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\utils\\adt\\jsonb.c\"\"\",\n  \"\"\"backend\\utils\\adt\\jsonb_gin.c\"\"\",\n  \"\"\"backend\\utils\\adt\\jsonb_op.c\"\"\",\n  \"\"\"backend\\utils\\adt\\jsonb_util.c\"\"\",\n  \"\"\"backend\\utils\\adt\\jsonbsubs.c\"\"\",\n  \"\"\"include\\utils\\jsonb.h\"\"\"\n)\r\n"
  },
  {
    "id": 6,
    "question": "Where is JIT compilation implemented?",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"JIT compilation\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres57\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\jit\\jit.c\"\"\",\n  \"\"\"backend\\jit\\llvm\\SectionMemoryManager.cpp\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit.c\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_deform.c\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_error.cpp\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_expr.c\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_inline.cpp\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_types.c\"\"\",\n  \"\"\"backend\\jit\\llvm\\llvmjit_wrap.cpp\"\"\",\n  \"\"\"include\\jit\\SectionMemoryManager.h\"\"\"\n)\r\n"
  },
  {
    "id": 7,
    "question": "Find functions with high cyclomatic complexity",
    "category": "metrics",
    "query": "cpg.method.where(_.tag.nameExact(\"cyclomatic-complexity\").value.toInt > 15).name.l.take(10)",
    "success": true,
    "output": "\u001b[31m\u001b[31m-- [E008] Not Found Error: -----------------------------------------------------\u001b[0m\u001b[0m\r\n\u001b[31m1 |\u001b[0mcpg.method.where(_.tag.nameExact(\u001b[31m\"cyclomatic-complexity\"\u001b[0m).value.toInt > \u001b[31m15\u001b[0m).name.l.take(\u001b[31m10\u001b[0m)\r\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\r\n\u001b[31m  |\u001b[0mvalue toInt is not a member of Iterator[String], but could be made available as an extension method.\r\n\u001b[31m  |\u001b[0m\r\n\u001b[31m  |\u001b[0mOne of the following imports might m"
  },
  {
    "id": 9,
    "question": "Show me untested critical functions",
    "category": "testing",
    "query": "cpg.method.where(_.tag.nameExact(\"test-coverage\").valueExact(\"untested\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres58\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"<global>\",\n  \"brinhandler\",\n  \"initialize_brin_insertstate\",\n  \"brininsert\",\n  \"brininsertcleanup\",\n  \"brinbeginscan\",\n  \"bringetbitmap\",\n  \"brinrescan\",\n  \"brinendscan\",\n  \"brinbuildCallback\"\n)\r\n"
  },
  {
    "id": 11,
    "question": "What functions handle query planning?",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"function-purpose\").valueExact(\"query-planning\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres59\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"TupleDescInitEntry\",\n  \"<global>\",\n  \"<clinit>\",\n  \"rewrite_heap_dead_tuple\",\n  \"logical_end_heap_rewrite\",\n  \"heap_create_with_catalog\",\n  \"index_build\",\n  \"RangeVarGetAndCheckCreationNamespace\",\n  \"get_object_address_relobject\",\n  \"ExecRenameStmt\"\n)\r\n"
  },
  {
    "id": 12,
    "question": "Show me all functions in the storage layer",
    "category": "architecture",
    "query": "cpg.file.where(_.tag.nameExact(\"arch-layer\").valueExact(\"storage\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres60\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\storage\\buffer\\buf_init.c\"\"\",\n  \"\"\"backend\\storage\\buffer\\buf_table.c\"\"\",\n  \"\"\"backend\\storage\\buffer\\bufmgr.c\"\"\",\n  \"\"\"backend\\storage\\buffer\\freelist.c\"\"\",\n  \"\"\"backend\\storage\\buffer\\localbuf.c\"\"\",\n  \"\"\"backend\\storage\\freespace\\freespace.c\"\"\",\n  \"\"\"backend\\storage\\freespace\\fsmpage.c\"\"\",\n  \"\"\"backend\\storage\\freespace\\indexfsm.c\"\"\",\n  \"\"\"backend\\storage\\page\\bufpage.c\"\"\",\n  \"\"\"backend\\storage\\page\\checksum.c\"\"\"\n"
  },
  {
    "id": 13,
    "question": "Find buffer overflow vulnerabilities",
    "category": "security",
    "query": "cpg.call.where(_.tag.nameExact(\"security-risk\").valueExact(\"buffer-overflow\")).map(c => (c.name, c.file.name, c.lineNumber.getOrElse(0))).l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres61\u001b[0m: \u001b[32mList\u001b[0m[(\u001b[32mString\u001b[0m, \u001b[32mIterator\u001b[0m[\u001b[32mString\u001b[0m], \u001b[32mInt\u001b[0m)] = List(\n  (\"memcpy\", non-empty iterator, 2486),\n  (\"memcpy\", non-empty iterator, 680),\n  (\"memcpy\", non-empty iterator, 685),\n  (\"memcpy\", non-empty iterator, 692),\n  (\"memcpy\", non-empty iterator, 699),\n  (\"memcpy\", non-empty iterator, 804),\n  (\"memcpy\", non-empty iterator, 813),\n  (\"memcpy\", non-empty iterator, 822),\n  (\"memcpy\", non-empty iterator, 832),\n  (\"memcpy\", non-empty itera"
  },
  {
    "id": 14,
    "question": "What functions use hash tables?",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"data-structure\").valueExact(\"hash-table\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres62\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"bloom_filter_size\",\n  \"bloom_init\",\n  \"bloom_add_value\",\n  \"bloom_contains_value\",\n  \"brin_bloom_add_value\",\n  \"brin_bloom_consistent\",\n  \"brin_bloom_union\",\n  \"brin_bloom_summary_out\",\n  \"missing_hash\",\n  \"init_missing_cache\"\n)\r\n"
  },
  {
    "id": 15,
    "question": "Show me functions related to MVCC",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"domain-concept\").valueExact(\"mvcc\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres63\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"_brin_begin_parallel\",\n  \"_brin_end_parallel\",\n  \"_brin_parallel_estimate_shared\",\n  \"heap_getsysattr\",\n  \"toast_delete_datum\",\n  \"toastrel_valueid_exists\",\n  \"init_toast_snapshot\",\n  \"gin_clean_pending_list\",\n  \"moveRightIfItNeeded\",\n  \"collectMatchBitmap\"\n)\r\n"
  },
  {
    "id": 16,
    "question": "Where is partitioning implemented?",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"Partitioning\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres64\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\catalog\\partition.c\"\"\",\n  \"\"\"backend\\partitioning\\partbounds.c\"\"\",\n  \"\"\"backend\\partitioning\\partdesc.c\"\"\",\n  \"\"\"backend\\partitioning\\partprune.c\"\"\",\n  \"\"\"backend\\utils\\adt\\partitionfuncs.c\"\"\",\n  \"\"\"include\\catalog\\partition.h\"\"\",\n  \"\"\"include\\catalog\\pg_partitioned_table.h\"\"\",\n  \"\"\"include\\partitioning\\partbounds.h\"\"\",\n  \"\"\"include\\partitioning\\partdefs.h\"\"\",\n  \"\"\"include\\partitioning\\partdesc.h\"\"\"\n)\r\n"
  },
  {
    "id": 17,
    "question": "Find API functions with many callers",
    "category": "api",
    "query": "cpg.method.where(_.tag.nameExact(\"api-caller-count\").value.toInt > 100).sortBy(_.tag.nameExact(\"api-caller-count\").value.toInt).name.l.take(10)",
    "success": true,
    "output": "\u001b[31m\u001b[31m-- [E008] Not Found Error: -----------------------------------------------------\u001b[0m\u001b[0m\r\n\u001b[31m1 |\u001b[0mcpg.method.where(_.tag.nameExact(\u001b[31m\"api-caller-count\"\u001b[0m).value.toInt > \u001b[31m100\u001b[0m).sortBy(_.tag.nameExact(\u001b[31m\"api-caller-count\"\u001b[0m).value.toInt).name.l.take(\u001b[31m10\u001b[0m)\r\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\r\n\u001b[31m  |\u001b[0mvalue toInt is not a member of Iterator[String], but could be made available as an extension method.\r\n\u001b[31m "
  },
  {
    "id": 18,
    "question": "What functions need refactoring?",
    "category": "metrics",
    "query": "cpg.method.where(_.tag.nameExact(\"refactor-priority\").valueExact(\"critical\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres65\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"<global>\",\n  \"brininsert\",\n  \"bringetbitmap\",\n  \"brinbuild\",\n  \"brin_summarize_range\",\n  \"summarize_range\",\n  \"union_tuples\",\n  \"_brin_begin_parallel\",\n  \"_brin_parallel_merge\",\n  \"<global>\"\n)\r\n"
  },
  {
    "id": 19,
    "question": "Show me transaction control functions",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"function-purpose\").valueExact(\"transaction-control\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres66\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"brin_minmax_multi_distance_interval\",\n  \"brin_can_do_samepage_update\",\n  \"heap_attisnull\",\n  \"heap_getsysattr\",\n  \"relation_open\",\n  \"try_relation_open\",\n  \"init_toast_snapshot\",\n  \"execute_attr_map_tuple\",\n  \"scanGetItem\",\n  \"ginFillScanEntry\"\n)\r\n"
  },
  {
    "id": 20,
    "question": "Find parallel query execution code",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"Parallel query\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres67\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\access\\transam\\parallel.c\"\"\",\n  \"\"\"backend\\commands\\vacuumparallel.c\"\"\",\n  \"\"\"backend\\replication\\logical\\applyparallelworker.c\"\"\",\n  \"\"\"bin\\pg_dump\\parallel.c\"\"\",\n  \"\"\"bin\\pg_upgrade\\parallel.c\"\"\",\n  \"\"\"fe_utils\\parallel_slot.c\"\"\",\n  \"\"\"bin\\pg_dump\\parallel.h\"\"\",\n  \"\"\"include\\access\\parallel.h\"\"\",\n  \"\"\"include\\fe_utils\\parallel_slot.h\"\"\"\n)\r\n"
  },
  {
    "id": 21,
    "question": "What functions are in the optimizer subsystem?",
    "category": "subsystem",
    "query": "cpg.file.where(_.tag.nameExact(\"subsystem-name\").valueExact(\"optimizer\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres68\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\optimizer\\geqo\\geqo_copy.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_cx.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_erx.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_eval.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_main.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_misc.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_mutation.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_ox1.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_ox2.c\"\"\",\n  \"\"\"backend\\optimizer\\geqo\\geqo_pmx."
  },
  {
    "id": 22,
    "question": "Show me SQL injection risks",
    "category": "security",
    "query": "cpg.call.where(_.tag.nameExact(\"security-risk\").valueExact(\"sql-injection\")).map(c => (c.name, c.file.name, c.lineNumber.getOrElse(0))).l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres69\u001b[0m: \u001b[32mList\u001b[0m[(\u001b[32mString\u001b[0m, \u001b[32mIterator\u001b[0m[\u001b[32mString\u001b[0m], \u001b[32mInt\u001b[0m)] = List(\n  (\"SPI_exec\", non-empty iterator, 630),\n  (\"SPI_execute\", non-empty iterator, 653),\n  (\"SPI_exec\", non-empty iterator, 686),\n  (\"SPI_exec\", non-empty iterator, 694),\n  (\"SPI_exec\", non-empty iterator, 830),\n  (\"SPI_exec\", non-empty iterator, 841),\n  (\"SPI_exec\", non-empty iterator, 854),\n  (\"SPI_exec\", non-empty iterator, 863),\n  (\"SPI_exec\", non-empty iterator, 874),\n  (\"SPI_"
  },
  {
    "id": 24,
    "question": "What code implements TOAST?",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"TOAST\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres70\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\access\\common\\detoast.c\"\"\",\n  \"\"\"backend\\access\\common\\toast_compression.c\"\"\",\n  \"\"\"backend\\access\\common\\toast_internals.c\"\"\",\n  \"\"\"backend\\access\\heap\\heaptoast.c\"\"\",\n  \"\"\"backend\\access\\table\\toast_helper.c\"\"\",\n  \"\"\"backend\\catalog\\toasting.c\"\"\",\n  \"\"\"include\\access\\detoast.h\"\"\",\n  \"\"\"include\\access\\heaptoast.h\"\"\",\n  \"\"\"include\\access\\toast_compression.h\"\"\",\n  \"\"\"include\\access\\toast_helper.h\"\"\"\n)\r\n"
  },
  {
    "id": 25,
    "question": "Show me functions that do sorting",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"algorithm-class\").valueExact(\"sorting\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres71\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"brinhandler\",\n  \"brinbeginscan\",\n  \"brinrescan\",\n  \"initialize_brin_buildstate\",\n  \"form_and_spill_tuple\",\n  \"add_values_to_range\",\n  \"_brin_begin_parallel\",\n  \"_brin_parallel_heapscan\",\n  \"_brin_parallel_merge\",\n  \"_brin_leader_participate_as_worker\"\n)\r\n"
  },
  {
    "id": 27,
    "question": "What are the most popular APIs?",
    "category": "api",
    "query": "cpg.method.where(_.tag.nameExact(\"api-caller-count\").value.toInt > 100).sortBy(_.tag.nameExact(\"api-caller-count\").value.toInt).name.l.take(10)",
    "success": true,
    "output": "\u001b[31m\u001b[31m-- [E008] Not Found Error: -----------------------------------------------------\u001b[0m\u001b[0m\r\n\u001b[31m1 |\u001b[0mcpg.method.where(_.tag.nameExact(\u001b[31m\"api-caller-count\"\u001b[0m).value.toInt > \u001b[31m100\u001b[0m).sortBy(_.tag.nameExact(\u001b[31m\"api-caller-count\"\u001b[0m).value.toInt).name.l.take(\u001b[31m10\u001b[0m)\r\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\r\n\u001b[31m  |\u001b[0mvalue toInt is not a member of Iterator[String], but could be made available as an extension method.\r\n\u001b[31m "
  },
  {
    "id": 28,
    "question": "Show me catalog access functions",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"function-purpose\").valueExact(\"catalog-access\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres72\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"bloom_get_procinfo\",\n  \"inclusion_get_procinfo\",\n  \"inclusion_get_strategy_procinfo\",\n  \"minmax_get_strategy_procinfo\",\n  \"minmax_multi_get_procinfo\",\n  \"minmax_multi_get_strategy_procinfo\",\n  \"brinvalidate\",\n  \"heap_attisnull\",\n  \"printsimple\",\n  \"relation_close\"\n)\r\n"
  },
  {
    "id": 29,
    "question": "Find BRIN index implementation",
    "category": "feature",
    "query": "cpg.file.where(_.tag.nameExact(\"Feature\").valueExact(\"BRIN indexes\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres73\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"\"\"backend\\access\\brin\\brin.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_bloom.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_inclusion.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_minmax.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_minmax_multi.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_pageops.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_revmap.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_tuple.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_validate.c\"\"\",\n  \"\"\"backend\\access\\brin\\brin_xlog.c\"\"\"\n)\r"
  },
  {
    "id": 30,
    "question": "What functions handle parsing?",
    "category": "semantic",
    "query": "cpg.method.where(_.tag.nameExact(\"function-purpose\").valueExact(\"parsing\")).name.l.take(10)",
    "success": true,
    "output": "\u001b[33mval\u001b[0m \u001b[36mres74\u001b[0m: \u001b[32mList\u001b[0m[\u001b[32mString\u001b[0m] = List(\n  \"brinbeginscan\",\n  \"brinrescan\",\n  \"brinendscan\",\n  \"brinbuildCallback\",\n  \"brinbuildCallbackParallel\",\n  \"brinoptions\",\n  \"summarize_range\",\n  \"brinsummarize\",\n  \"check_null_keys\",\n  \"_brin_parallel_heapscan\"\n)\r\n"
  }
]