{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(curl -s \"https://www.postgresql.org/list/pgsql-hackers/2022-01/\")",
      "Bash(curl -s \"https://www.postgresql.org/list/pgsql-hackers/since/202201010000/\")",
      "WebFetch(domain:www.interdb.jp)",
      "Bash(timeout:*)",
      "Bash(pip install:*)",
      "Bash(tee:*)",
      "Bash(curl:*)",
      "Read(//c/Users/user/joern/workspace/postgres-REL_17_6/**)",
      "Bash(dir:*)",
      "Read(//c/Users/user/joern/workspace/**)",
      "Read(//c/Users/user/joern/joern-cli/src/universal/**)",
      "Bash(./joern.bat:*)",
      "Read(//c/Users/user/joern/**)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Read(//c/Users/user/anaconda3/envs/llama.cpp/Lib/site-packages/cpgqls_client/**)",
      "Bash(cat:*)",
      "WebFetch(domain:docs.joern.io)",
      "Bash(./joern:*)",
      "Read(//c/Users/user/.lmstudio/models/llmxcpg/LLMxCPG-Q//**)",
      "Bash(pip show:*)",
      "Bash(pip uninstall:*)",
      "Read(//c/**)",
      "WebFetch(domain:docs.shiftleft.io)",
      "Bash(taskkill:*)",
      "Bash(if [ -f re_enrichment_layers.log ])",
      "Bash(then tail -50 re_enrichment_layers.log)",
      "Bash(else echo \"Log file not created yet, checking processes...\")",
      "Bash(fi)",
      "Bash(tasklist)",
      "Bash(if [ -f rag_pipeline_results_3q.json ])",
      "Bash(then cat rag_pipeline_results_3q.json)",
      "WebFetch(domain:github.com)",
      "WebFetch(domain:xgrammar.mlc.ai)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "Bash(where:*)",
      "Bash(for dir in \"C:/Users/user/.lmstudio/models/lmstudio-community\"/*)",
      "Bash(ls:*)",
      "Bash(done)",
      "Bash(conda info:*)",
      "Bash(conda:*)",
      "Bash(echo $CONDA_DEFAULT_ENV)",
      "Bash(git init:*)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\ndocs: Update documentation with RAG-CPGQL production achievements\n\nMajor updates:\n- RAG-CPGQL system: 100% query validity on 30-question validation set\n- 4-agent architecture (Analyzer â†’ Retriever â†’ Enrichment â†’ Generator)\n- 24k indexed items: 23,156 Q&A pairs + 1,072 CPGQL examples\n- 12-layer semantic enrichment implementation\n- RAGAS evaluation integration (79.1% Q&A similarity)\n- Joern client integration via cpgqls-client\n- 200-question statistical test suite with checkpointing\n- Comprehensive root README with all subprojects\n- Updated rag_cpgql/README.md with production metrics\n\nSubproject status:\n- rag_cpgql: âœ… PRODUCTION (100% validity)\n- cpg_enrichment: âœ… COMPLETE (96/100 quality score, 82% coverage)\n- feature_mapping: âœ… COMPLETE (394 PG features mapped)\n- cpgql_gbnf: âœ… COMPLETE (formal GBNF grammar)\n- hackers: âœ… COMPLETE (10.8 emails/sec scraper)\n- pg_books: âœ… COMPLETE (1,328 QA pairs)\n- xgrammar_tests: ðŸš§ PROTOTYPE (grammar-guided generation)\n\nGenerated with Claude Code\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\ndocs: Update documentation with RAG-CPGQL production achievements\n\nMajor updates:\n- RAG-CPGQL system: 100% query validity on 30-question validation set\n- 4-agent architecture (Analyzer â†’ Retriever â†’ Enrichment â†’ Generator)\n- 24k indexed items: 23,156 Q&A pairs + 1,072 CPGQL examples\n- 12-layer semantic enrichment implementation\n- RAGAS evaluation integration (79.1% Q&A similarity)\n- Joern client integration via cpgqls-client\n- 200-question statistical test suite with checkpointing\n- Comprehensive root README with all subprojects\n- Updated rag_cpgql/README.md with production metrics\n\nSubproject status:\n- rag_cpgql: Production (100% validity)\n- cpg_enrichment: Complete (96/100 quality score, 82% coverage)\n- feature_mapping: Complete (394 PG features mapped)\n- cpgql_gbnf: Complete (formal GBNF grammar)\n- hackers: Complete (10.8 emails/sec scraper)\n- pg_books: Complete (1,328 QA pairs)\n- xgrammar_tests: Prototype (grammar-guided generation)\n\nGenerated with Claude Code\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(gh repo create:*)",
      "Bash(gh auth:*)",
      "Bash(git lfs:*)",
      "Bash(git rm:*)",
      "Bash(git commit:*)",
      "Bash(git push:*)"
    ],
    "deny": [],
    "ask": []
  }
}
